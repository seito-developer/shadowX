{"ast":null,"code":"var _jsxFileName = \"/Users/seito/Documents/develop/count-jp/my-app/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport textToSpeech from '@google-cloud/text-to-speech';\nimport fs from 'fs';\nimport util from 'util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const client = new textToSpeech.TextToSpeechClient();\n\n  async function quickStart() {\n    // The text to synthesize\n    const text = 'hello, world!'; // Construct the request\n\n    const request = {\n      input: {\n        text: text\n      },\n      // Select the language and SSML voice gender (optional)\n      voice: {\n        languageCode: 'en-US',\n        ssmlGender: 'NEUTRAL'\n      },\n      // select the type of audio encoding\n      audioConfig: {\n        audioEncoding: 'MP3'\n      }\n    }; // Performs the text-to-speech request\n\n    const [response] = await client.synthesizeSpeech(request); // Write the binary audio content to a local file\n\n    const writeFile = util.promisify(fs.writeFile);\n    await writeFile('output.mp3', response.audioContent, 'binary');\n    console.log('Audio content written to file: output.mp3');\n  }\n\n  const handleClick = () => {\n    quickStart();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleClick,\n      children: \"Click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/src/App.tsx"],"names":["React","textToSpeech","fs","util","App","client","TextToSpeechClient","quickStart","text","request","input","voice","languageCode","ssmlGender","audioConfig","audioEncoding","response","synthesizeSpeech","writeFile","promisify","audioContent","console","log","handleClick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;;;AASA,SAASC,GAAT,GAAe;AAEb,QAAMC,MAAM,GAAG,IAAIJ,YAAY,CAACK,kBAAjB,EAAf;;AAEA,iBAAeC,UAAf,GAA4B;AAC1B;AACA,UAAMC,IAAI,GAAG,eAAb,CAF0B,CAI1B;;AACA,UAAMC,OAAoB,GAAG;AAC3BC,MAAAA,KAAK,EAAE;AAACF,QAAAA,IAAI,EAAEA;AAAP,OADoB;AAE3B;AACAG,MAAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE,OAAf;AAAwBC,QAAAA,UAAU,EAAE;AAApC,OAHoB;AAI3B;AACAC,MAAAA,WAAW,EAAE;AAACC,QAAAA,aAAa,EAAE;AAAhB;AALc,KAA7B,CAL0B,CAa1B;;AACA,UAAM,CAACC,QAAD,IAAa,MAAMX,MAAM,CAACY,gBAAP,CAAwBR,OAAxB,CAAzB,CAd0B,CAe1B;;AACA,UAAMS,SAAS,GAAGf,IAAI,CAACgB,SAAL,CAAejB,EAAE,CAACgB,SAAlB,CAAlB;AACA,UAAMA,SAAS,CAAC,YAAD,EAAeF,QAAQ,CAACI,YAAxB,EAAsC,QAAtC,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD;;AAED,QAAMC,WAAW,GAAG,MAAM;AACxBhB,IAAAA,UAAU;AACX,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEgB,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KAlCQnB,G;AAoCT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport textToSpeech from '@google-cloud/text-to-speech';\nimport fs from 'fs';\nimport util from 'util';\nimport { GOOGLE_APPLICATION_CREDENTIALS } from './const';\n\ninterface RequestProps {\n  input: any\n  voice: any\n  audioConfig: any\n}\n\nfunction App() {\n  \n  const client = new textToSpeech.TextToSpeechClient();\n  \n  async function quickStart() {\n    // The text to synthesize\n    const text = 'hello, world!';\n\n    // Construct the request\n    const request:RequestProps = {\n      input: {text: text},\n      // Select the language and SSML voice gender (optional)\n      voice: {languageCode: 'en-US', ssmlGender: 'NEUTRAL'},\n      // select the type of audio encoding\n      audioConfig: {audioEncoding: 'MP3'}\n    };\n\n    // Performs the text-to-speech request\n    const [response] = await client.synthesizeSpeech(request);\n    // Write the binary audio content to a local file\n    const writeFile = util.promisify(fs.writeFile);\n    await writeFile('output.mp3', response.audioContent, 'binary');\n    console.log('Audio content written to file: output.mp3');\n  }\n\n  const handleClick = () => {\n    quickStart();\n  }\n\n  return (\n    <div className=\"App\">\n      <button type=\"button\" onClick={handleClick}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}