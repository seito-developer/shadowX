{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/**\n * Contains helpers for working with vendor prefixes.\n *\n * @example\n * const vendor = postcss.vendor;\n *\n * @namespace vendor\n */\n\nvar vendor = {\n  /**\n   * Returns the vendor prefix extracted from an input string.\n   *\n   * @param {string} prop - string with or without vendor prefix\n   *\n   * @return {string} vendor prefix or empty string\n   *\n   * @example\n   * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'\n   * postcss.vendor.prefix('tab-size')      //=> ''\n   */\n  prefix: function prefix(prop) {\n    var match = prop.match(/^(-\\w+-)/);\n\n    if (match) {\n      return match[0];\n    } else {\n      return '';\n    }\n  },\n\n  /**\n   * Returns the input string stripped of its vendor prefix.\n   *\n   * @param {string} prop - string with or without vendor prefix\n   *\n   * @return {string} string name without vendor prefixes\n   *\n   * @example\n   * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n   */\n  unprefixed: function unprefixed(prop) {\n    return prop.replace(/^-\\w+-/, '');\n  }\n};\nexports.default = vendor;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["vendor.es6"],"names":["vendor","prefix","match","prop","unprefixed"],"mappings":";;;AAAA;;;;;;;;;AAQA,IAAIA,MAAAA,GAAS;AAET;;;;;;;;;;;AAWAC,EAAAA,MAbS,EAAA,SAAA,MAAA,CAAA,IAAA,EAaI;AACT,QAAIC,KAAAA,GAAQC,IAAAA,CAAAA,KAAAA,CAAZ,UAAYA,CAAZ;;AACA,QAAA,KAAA,EAAa;AACT,aAAOD,KAAAA,CAAP,CAAOA,CAAP;AADJ,KAAA,MAEO;AACH,aAAA,EAAA;AACH;AAnBI,GAAA;;AAsBT;;;;;;;;;;AAUAE,EAAAA,UAhCS,EAAA,SAAA,UAAA,CAAA,IAAA,EAgCQ;AACb,WAAOD,IAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAP,EAAOA,CAAP;AACH;AAlCQ,CAAb;kBAsCeH,M","sourcesContent":["/**\n * Contains helpers for working with vendor prefixes.\n *\n * @example\n * const vendor = postcss.vendor;\n *\n * @namespace vendor\n */\nlet vendor = {\n\n    /**\n     * Returns the vendor prefix extracted from an input string.\n     *\n     * @param {string} prop - string with or without vendor prefix\n     *\n     * @return {string} vendor prefix or empty string\n     *\n     * @example\n     * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'\n     * postcss.vendor.prefix('tab-size')      //=> ''\n     */\n    prefix(prop) {\n        let match = prop.match(/^(-\\w+-)/);\n        if ( match ) {\n            return match[0];\n        } else {\n            return '';\n        }\n    },\n\n    /**\n     * Returns the input string stripped of its vendor prefix.\n     *\n     * @param {string} prop - string with or without vendor prefix\n     *\n     * @return {string} string name without vendor prefixes\n     *\n     * @example\n     * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n     */\n    unprefixed(prop) {\n        return prop.replace(/^-\\w+-/, '');\n    }\n\n};\n\nexport default vendor;\n"]},"metadata":{},"sourceType":"script"}