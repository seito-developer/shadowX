{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction updateSource(nodes, source) {\n  return _lodash.default.tap(Array.isArray(nodes) ? _postcss.default.root({\n    nodes\n  }) : nodes, tree => {\n    tree.walk(node => node.source = source);\n  });\n}\n\nfunction _default(_config, {\n  base: pluginBase,\n  components: pluginComponents,\n  utilities: pluginUtilities\n}) {\n  return function (css) {\n    css.walkAtRules('import', atRule => {\n      if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'base';\n      }\n\n      if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'components';\n      }\n\n      if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'utilities';\n      }\n\n      if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'screens';\n      }\n    });\n    let includesScreensExplicitly = false;\n    const layers = {\n      base: [],\n      components: [],\n      utilities: []\n    };\n    css.walkAtRules('layer', atRule => {\n      if (!['base', 'components', 'utilities'].includes(atRule.params)) {\n        return;\n      }\n\n      layers[atRule.params].push(atRule);\n    });\n    css.walkAtRules('tailwind', atRule => {\n      if (atRule.params === 'preflight') {\n        // prettier-ignore\n        throw atRule.error(\"`@tailwind preflight` is not a valid at-rule in Tailwind v2.0, use `@tailwind base` instead.\", {\n          word: 'preflight'\n        });\n      }\n\n      if (atRule.params === 'base') {\n        atRule.after(layers.base);\n        atRule.after(updateSource(pluginBase, atRule.source));\n      }\n\n      if (atRule.params === 'components') {\n        atRule.after(layers.components);\n        atRule.after(updateSource(pluginComponents, atRule.source));\n      }\n\n      if (atRule.params === 'utilities') {\n        atRule.after(layers.utilities);\n        atRule.after(updateSource(pluginUtilities, atRule.source));\n      }\n\n      if (atRule.params === 'screens') {\n        includesScreensExplicitly = true;\n      }\n    });\n\n    if (!includesScreensExplicitly) {\n      css.append([_postcss.default.atRule({\n        name: 'tailwind',\n        params: 'screens'\n      })]);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/lib/substituteTailwindAtRules.js"],"names":["Object","defineProperty","exports","value","default","_default","_lodash","_interopRequireDefault","require","_postcss","obj","__esModule","updateSource","nodes","source","tap","Array","isArray","root","tree","walk","node","_config","base","pluginBase","components","pluginComponents","utilities","pluginUtilities","css","walkAtRules","atRule","params","name","includesScreensExplicitly","layers","includes","push","error","word","after","append"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction updateSource(nodes, source) {\n  return _lodash.default.tap(Array.isArray(nodes) ? _postcss.default.root({\n    nodes\n  }) : nodes, tree => {\n    tree.walk(node => node.source = source);\n  });\n}\n\nfunction _default(_config, {\n  base: pluginBase,\n  components: pluginComponents,\n  utilities: pluginUtilities\n}) {\n  return function (css) {\n    css.walkAtRules('import', atRule => {\n      if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'base';\n      }\n\n      if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'components';\n      }\n\n      if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'utilities';\n      }\n\n      if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'screens';\n      }\n    });\n    let includesScreensExplicitly = false;\n    const layers = {\n      base: [],\n      components: [],\n      utilities: []\n    };\n    css.walkAtRules('layer', atRule => {\n      if (!['base', 'components', 'utilities'].includes(atRule.params)) {\n        return;\n      }\n\n      layers[atRule.params].push(atRule);\n    });\n    css.walkAtRules('tailwind', atRule => {\n      if (atRule.params === 'preflight') {\n        // prettier-ignore\n        throw atRule.error(\"`@tailwind preflight` is not a valid at-rule in Tailwind v2.0, use `@tailwind base` instead.\", {\n          word: 'preflight'\n        });\n      }\n\n      if (atRule.params === 'base') {\n        atRule.after(layers.base);\n        atRule.after(updateSource(pluginBase, atRule.source));\n      }\n\n      if (atRule.params === 'components') {\n        atRule.after(layers.components);\n        atRule.after(updateSource(pluginComponents, atRule.source));\n      }\n\n      if (atRule.params === 'utilities') {\n        atRule.after(layers.utilities);\n        atRule.after(updateSource(pluginUtilities, atRule.source));\n      }\n\n      if (atRule.params === 'screens') {\n        includesScreensExplicitly = true;\n      }\n    });\n\n    if (!includesScreensExplicitly) {\n      css.append([_postcss.default.atRule({\n        name: 'tailwind',\n        params: 'screens'\n      })]);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}