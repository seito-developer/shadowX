{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _cssSyntaxError = require('./css-syntax-error');\n\nvar _cssSyntaxError2 = _interopRequireDefault(_cssSyntaxError);\n\nvar _previousMap = require('./previous-map');\n\nvar _previousMap2 = _interopRequireDefault(_previousMap);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar sequence = 0;\n/**\n * Represents the source CSS.\n *\n * @example\n * const root  = postcss.parse(css, { from: file });\n * const input = root.source.input;\n */\n\nvar Input = function () {\n  /**\n   * @param {string} css    - input CSS source\n   * @param {object} [opts] - {@link Processor#process} options\n   */\n  function Input(css) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Input);\n\n    if (css === null || (typeof css === 'undefined' ? 'undefined' : _typeof(css)) === 'object' && !css.toString) {\n      throw new Error('PostCSS received ' + css + ' instead of CSS string');\n    }\n    /**\n     * @member {string} - input CSS source\n     *\n     * @example\n     * const input = postcss.parse('a{}', { from: file }).input;\n     * input.css //=> \"a{}\";\n     */\n\n\n    this.css = css.toString();\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.css = this.css.slice(1);\n    }\n\n    if (opts.from) {\n      if (/^\\w+:\\/\\//.test(opts.from)) {\n        /**\n         * @member {string} - The absolute path to the CSS source file\n         *                    defined with the `from` option.\n         *\n         * @example\n         * const root = postcss.parse(css, { from: 'a.css' });\n         * root.source.input.file //=> '/home/ai/a.css'\n         */\n        this.file = opts.from;\n      } else {\n        this.file = _path2.default.resolve(opts.from);\n      }\n    }\n\n    var map = new _previousMap2.default(this.css, opts);\n\n    if (map.text) {\n      /**\n       * @member {PreviousMap} - The input source map passed from\n       *                         a compilation step before PostCSS\n       *                         (for example, from Sass compiler).\n       *\n       * @example\n       * root.source.input.map.consumer().sources //=> ['a.sass']\n       */\n      this.map = map;\n      var file = map.consumer().file;\n      if (!this.file && file) this.file = this.mapResolve(file);\n    }\n\n    if (!this.file) {\n      sequence += 1;\n      /**\n       * @member {string} - The unique ID of the CSS source. It will be\n       *                    created if `from` option is not provided\n       *                    (because PostCSS does not know the file path).\n       *\n       * @example\n       * const root = postcss.parse(css);\n       * root.source.input.file //=> undefined\n       * root.source.input.id   //=> \"<input css 1>\"\n       */\n\n      this.id = '<input css ' + sequence + '>';\n    }\n\n    if (this.map) this.map.file = this.from;\n  }\n\n  Input.prototype.error = function error(message, line, column) {\n    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var result = void 0;\n    var origin = this.origin(line, column);\n\n    if (origin) {\n      result = new _cssSyntaxError2.default(message, origin.line, origin.column, origin.source, origin.file, opts.plugin);\n    } else {\n      result = new _cssSyntaxError2.default(message, line, column, this.css, this.file, opts.plugin);\n    }\n\n    result.input = {\n      line: line,\n      column: column,\n      source: this.css\n    };\n    if (this.file) result.input.file = this.file;\n    return result;\n  };\n  /**\n   * Reads the input source map and returns a symbol position\n   * in the input source (e.g., in a Sass file that was compiled\n   * to CSS before being passed to PostCSS).\n   *\n   * @param {number} line   - line in input CSS\n   * @param {number} column - column in input CSS\n   *\n   * @return {filePosition} position in input source\n   *\n   * @example\n   * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }\n   */\n\n\n  Input.prototype.origin = function origin(line, column) {\n    if (!this.map) return false;\n    var consumer = this.map.consumer();\n    var from = consumer.originalPositionFor({\n      line: line,\n      column: column\n    });\n    if (!from.source) return false;\n    var result = {\n      file: this.mapResolve(from.source),\n      line: from.line,\n      column: from.column\n    };\n    var source = consumer.sourceContentFor(from.source);\n    if (source) result.source = source;\n    return result;\n  };\n\n  Input.prototype.mapResolve = function mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file;\n    } else {\n      return _path2.default.resolve(this.map.consumer().sourceRoot || '.', file);\n    }\n  };\n  /**\n   * The CSS source identifier. Contains {@link Input#file} if the user\n   * set the `from` option, or {@link Input#id} if they did not.\n   * @type {string}\n   *\n   * @example\n   * const root = postcss.parse(css, { from: 'a.css' });\n   * root.source.input.from //=> \"/home/ai/a.css\"\n   *\n   * const root = postcss.parse(css);\n   * root.source.input.from //=> \"<input css 1>\"\n   */\n\n\n  _createClass(Input, [{\n    key: 'from',\n    get: function get() {\n      return this.file || this.id;\n    }\n  }]);\n\n  return Input;\n}();\n\nexports.default = Input;\n/**\n * @typedef  {object} filePosition\n * @property {string} file   - path to file\n * @property {number} line   - source line in file\n * @property {number} column - source column in file\n */\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["input.es6"],"names":["sequence","Input","opts","css","path","map","PreviousMap","file","error","message","line","column","result","origin","CssSyntaxError","source","consumer","from","mapResolve"],"mappings":"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","sourcesContent":["import CssSyntaxError from './css-syntax-error';\nimport PreviousMap    from './previous-map';\n\nimport path from 'path';\n\nlet sequence = 0;\n\n/**\n * Represents the source CSS.\n *\n * @example\n * const root  = postcss.parse(css, { from: file });\n * const input = root.source.input;\n */\nclass Input {\n\n    /**\n     * @param {string} css    - input CSS source\n     * @param {object} [opts] - {@link Processor#process} options\n     */\n    constructor(css, opts = { }) {\n        if ( css === null || typeof css === 'object' && !css.toString ) {\n            throw new Error(`PostCSS received ${ css } instead of CSS string`);\n        }\n\n        /**\n         * @member {string} - input CSS source\n         *\n         * @example\n         * const input = postcss.parse('a{}', { from: file }).input;\n         * input.css //=> \"a{}\";\n         */\n        this.css = css.toString();\n\n        if ( this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE' ) {\n            this.css = this.css.slice(1);\n        }\n\n        if ( opts.from ) {\n            if ( /^\\w+:\\/\\//.test(opts.from) ) {\n                /**\n                 * @member {string} - The absolute path to the CSS source file\n                 *                    defined with the `from` option.\n                 *\n                 * @example\n                 * const root = postcss.parse(css, { from: 'a.css' });\n                 * root.source.input.file //=> '/home/ai/a.css'\n                 */\n                this.file = opts.from;\n            } else {\n                this.file = path.resolve(opts.from);\n            }\n        }\n\n        let map = new PreviousMap(this.css, opts);\n        if ( map.text ) {\n            /**\n             * @member {PreviousMap} - The input source map passed from\n             *                         a compilation step before PostCSS\n             *                         (for example, from Sass compiler).\n             *\n             * @example\n             * root.source.input.map.consumer().sources //=> ['a.sass']\n             */\n            this.map = map;\n            let file = map.consumer().file;\n            if ( !this.file && file ) this.file = this.mapResolve(file);\n        }\n\n        if ( !this.file ) {\n            sequence += 1;\n            /**\n             * @member {string} - The unique ID of the CSS source. It will be\n             *                    created if `from` option is not provided\n             *                    (because PostCSS does not know the file path).\n             *\n             * @example\n             * const root = postcss.parse(css);\n             * root.source.input.file //=> undefined\n             * root.source.input.id   //=> \"<input css 1>\"\n             */\n            this.id   = '<input css ' + sequence + '>';\n        }\n        if ( this.map ) this.map.file = this.from;\n    }\n\n    error(message, line, column, opts = { }) {\n        let result;\n        let origin = this.origin(line, column);\n        if ( origin ) {\n            result = new CssSyntaxError(message, origin.line, origin.column,\n                origin.source, origin.file, opts.plugin);\n        } else {\n            result = new CssSyntaxError(message, line, column,\n                this.css, this.file, opts.plugin);\n        }\n\n        result.input = { line, column, source: this.css };\n        if ( this.file ) result.input.file = this.file;\n\n        return result;\n    }\n\n    /**\n     * Reads the input source map and returns a symbol position\n     * in the input source (e.g., in a Sass file that was compiled\n     * to CSS before being passed to PostCSS).\n     *\n     * @param {number} line   - line in input CSS\n     * @param {number} column - column in input CSS\n     *\n     * @return {filePosition} position in input source\n     *\n     * @example\n     * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }\n     */\n    origin(line, column) {\n        if ( !this.map ) return false;\n        let consumer = this.map.consumer();\n\n        let from = consumer.originalPositionFor({ line, column });\n        if ( !from.source ) return false;\n\n        let result = {\n            file:   this.mapResolve(from.source),\n            line:   from.line,\n            column: from.column\n        };\n\n        let source = consumer.sourceContentFor(from.source);\n        if ( source ) result.source = source;\n\n        return result;\n    }\n\n    mapResolve(file) {\n        if ( /^\\w+:\\/\\//.test(file) ) {\n            return file;\n        } else {\n            return path.resolve(this.map.consumer().sourceRoot || '.', file);\n        }\n    }\n\n    /**\n     * The CSS source identifier. Contains {@link Input#file} if the user\n     * set the `from` option, or {@link Input#id} if they did not.\n     * @type {string}\n     *\n     * @example\n     * const root = postcss.parse(css, { from: 'a.css' });\n     * root.source.input.from //=> \"/home/ai/a.css\"\n     *\n     * const root = postcss.parse(css);\n     * root.source.input.from //=> \"<input css 1>\"\n     */\n    get from() {\n        return this.file || this.id;\n    }\n\n}\n\nexport default Input;\n\n/**\n * @typedef  {object} filePosition\n * @property {string} file   - path to file\n * @property {number} line   - source line in file\n * @property {number} column - source column in file\n */\n"]},"metadata":{},"sourceType":"script"}