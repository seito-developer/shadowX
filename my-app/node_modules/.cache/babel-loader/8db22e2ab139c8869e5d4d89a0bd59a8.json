{"ast":null,"code":"\"use strict\";\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _getModuleDependencies = _interopRequireDefault(require(\"./lib/getModuleDependencies\"));\n\nvar _registerConfigAsDependency = _interopRequireDefault(require(\"./lib/registerConfigAsDependency\"));\n\nvar _processTailwindFeatures = _interopRequireDefault(require(\"./processTailwindFeatures\"));\n\nvar _formatCSS = _interopRequireDefault(require(\"./lib/formatCSS\"));\n\nvar _resolveConfig = _interopRequireDefault(require(\"./util/resolveConfig\"));\n\nvar _getAllConfigs = _interopRequireDefault(require(\"./util/getAllConfigs\"));\n\nvar _constants = require(\"./constants\");\n\nvar _defaultConfigStub = _interopRequireDefault(require(\"../stubs/defaultConfig.stub.js\"));\n\nvar _log = _interopRequireDefault(require(\"./util/log\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction resolveConfigPath(filePath) {\n  // require('tailwindcss')({ theme: ..., variants: ... })\n  if (_lodash.default.isObject(filePath) && !_lodash.default.has(filePath, 'config') && !_lodash.default.isEmpty(filePath)) {\n    return undefined;\n  } // require('tailwindcss')({ config: 'custom-config.js' })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isString(filePath.config)) {\n    return _path.default.resolve(filePath.config);\n  } // require('tailwindcss')({ config: { theme: ..., variants: ... } })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isObject(filePath.config)) {\n    return undefined;\n  } // require('tailwindcss')('custom-config.js')\n\n\n  if (_lodash.default.isString(filePath)) {\n    return _path.default.resolve(filePath);\n  } // require('tailwindcss')\n\n\n  for (const configFile of _constants.supportedConfigFiles) {\n    try {\n      const configPath = _path.default.resolve(configFile);\n\n      _fs.default.accessSync(configPath);\n\n      return configPath;\n    } catch (err) {}\n  }\n\n  return undefined;\n}\n\nconst getConfigFunction = config => () => {\n  if (_lodash.default.isUndefined(config)) {\n    return (0, _resolveConfig.default)([...(0, _getAllConfigs.default)(_defaultConfigStub.default)]);\n  } // Skip this if Jest is running: https://github.com/facebook/jest/pull/9841#issuecomment-621417584\n\n\n  if (process.env.JEST_WORKER_ID === undefined) {\n    if (!_lodash.default.isObject(config)) {\n      (0, _getModuleDependencies.default)(config).forEach(mdl => {\n        delete require.cache[require.resolve(mdl.file)];\n      });\n    }\n  }\n\n  const configObject = _lodash.default.isObject(config) ? _lodash.default.get(config, 'config', config) : require(config);\n  return (0, _resolveConfig.default)([...(0, _getAllConfigs.default)(configObject)]);\n};\n\nlet warned = false;\n\nmodule.exports = function (config) {\n  const resolvedConfigPath = resolveConfigPath(config);\n  const getConfig = getConfigFunction(resolvedConfigPath || config);\n\n  const mode = _lodash.default.get(getConfig(), 'mode', 'aot');\n\n  if (mode === 'jit') {\n    if (!warned) {\n      _log.default.warn([`You have enabled the JIT engine which is currently in preview.`, 'Preview features are not covered by semver, may introduce breaking changes, and can change at any time.']);\n\n      warned = true;\n    }\n\n    return {\n      postcssPlugin: 'tailwindcss',\n      plugins: require('../jit/index.js')(config)\n    };\n  }\n\n  const plugins = [];\n\n  if (!_lodash.default.isUndefined(resolvedConfigPath)) {\n    plugins.push((0, _registerConfigAsDependency.default)(resolvedConfigPath));\n  }\n\n  return {\n    postcssPlugin: 'tailwindcss',\n    plugins: [...plugins, (0, _processTailwindFeatures.default)(getConfig), _formatCSS.default]\n  };\n};\n\nmodule.exports.postcss = true;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/index.js"],"names":["_path","_interopRequireDefault","require","_fs","_lodash","_getModuleDependencies","_registerConfigAsDependency","_processTailwindFeatures","_formatCSS","_resolveConfig","_getAllConfigs","_constants","_defaultConfigStub","_log","obj","__esModule","default","resolveConfigPath","filePath","isObject","has","isEmpty","undefined","isString","config","resolve","configFile","supportedConfigFiles","configPath","accessSync","err","getConfigFunction","isUndefined","process","env","JEST_WORKER_ID","forEach","mdl","cache","file","configObject","get","warned","module","exports","resolvedConfigPath","getConfig","mode","warn","postcssPlugin","plugins","push","postcss"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _getModuleDependencies = _interopRequireDefault(require(\"./lib/getModuleDependencies\"));\n\nvar _registerConfigAsDependency = _interopRequireDefault(require(\"./lib/registerConfigAsDependency\"));\n\nvar _processTailwindFeatures = _interopRequireDefault(require(\"./processTailwindFeatures\"));\n\nvar _formatCSS = _interopRequireDefault(require(\"./lib/formatCSS\"));\n\nvar _resolveConfig = _interopRequireDefault(require(\"./util/resolveConfig\"));\n\nvar _getAllConfigs = _interopRequireDefault(require(\"./util/getAllConfigs\"));\n\nvar _constants = require(\"./constants\");\n\nvar _defaultConfigStub = _interopRequireDefault(require(\"../stubs/defaultConfig.stub.js\"));\n\nvar _log = _interopRequireDefault(require(\"./util/log\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction resolveConfigPath(filePath) {\n  // require('tailwindcss')({ theme: ..., variants: ... })\n  if (_lodash.default.isObject(filePath) && !_lodash.default.has(filePath, 'config') && !_lodash.default.isEmpty(filePath)) {\n    return undefined;\n  } // require('tailwindcss')({ config: 'custom-config.js' })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isString(filePath.config)) {\n    return _path.default.resolve(filePath.config);\n  } // require('tailwindcss')({ config: { theme: ..., variants: ... } })\n\n\n  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isObject(filePath.config)) {\n    return undefined;\n  } // require('tailwindcss')('custom-config.js')\n\n\n  if (_lodash.default.isString(filePath)) {\n    return _path.default.resolve(filePath);\n  } // require('tailwindcss')\n\n\n  for (const configFile of _constants.supportedConfigFiles) {\n    try {\n      const configPath = _path.default.resolve(configFile);\n\n      _fs.default.accessSync(configPath);\n\n      return configPath;\n    } catch (err) {}\n  }\n\n  return undefined;\n}\n\nconst getConfigFunction = config => () => {\n  if (_lodash.default.isUndefined(config)) {\n    return (0, _resolveConfig.default)([...(0, _getAllConfigs.default)(_defaultConfigStub.default)]);\n  } // Skip this if Jest is running: https://github.com/facebook/jest/pull/9841#issuecomment-621417584\n\n\n  if (process.env.JEST_WORKER_ID === undefined) {\n    if (!_lodash.default.isObject(config)) {\n      (0, _getModuleDependencies.default)(config).forEach(mdl => {\n        delete require.cache[require.resolve(mdl.file)];\n      });\n    }\n  }\n\n  const configObject = _lodash.default.isObject(config) ? _lodash.default.get(config, 'config', config) : require(config);\n  return (0, _resolveConfig.default)([...(0, _getAllConfigs.default)(configObject)]);\n};\n\nlet warned = false;\n\nmodule.exports = function (config) {\n  const resolvedConfigPath = resolveConfigPath(config);\n  const getConfig = getConfigFunction(resolvedConfigPath || config);\n\n  const mode = _lodash.default.get(getConfig(), 'mode', 'aot');\n\n  if (mode === 'jit') {\n    if (!warned) {\n      _log.default.warn([`You have enabled the JIT engine which is currently in preview.`, 'Preview features are not covered by semver, may introduce breaking changes, and can change at any time.']);\n\n      warned = true;\n    }\n\n    return {\n      postcssPlugin: 'tailwindcss',\n      plugins: require('../jit/index.js')(config)\n    };\n  }\n\n  const plugins = [];\n\n  if (!_lodash.default.isUndefined(resolvedConfigPath)) {\n    plugins.push((0, _registerConfigAsDependency.default)(resolvedConfigPath));\n  }\n\n  return {\n    postcssPlugin: 'tailwindcss',\n    plugins: [...plugins, (0, _processTailwindFeatures.default)(getConfig), _formatCSS.default]\n  };\n};\n\nmodule.exports.postcss = true;"]},"metadata":{},"sourceType":"script"}