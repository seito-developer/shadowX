{"ast":null,"code":"import e from \"postcss\";\nimport o, { defaultOptions as t, standardizeSafelist as s, mergeExtractorSelectors as r } from \"purgecss\";\n\nasync function n(e, n, {\n  result: c\n}) {\n  const i = new o(),\n        u = { ...t,\n    ...e,\n    safelist: s(null == e ? void 0 : e.safelist)\n  };\n  e && \"function\" == typeof e.contentFunction && (u.content = e.contentFunction(n.source && n.source.input.file || \"\")), i.options = u;\n  const {\n    content: p,\n    extractors: a\n  } = u,\n        l = p.filter(e => \"string\" == typeof e),\n        f = p.filter(e => \"object\" == typeof e),\n        m = await i.extractSelectorsFromFiles(l, a),\n        g = await i.extractSelectorsFromString(f, a),\n        d = r(m, g);\n  i.walkThroughCSS(n, d), i.options.fontFace && i.removeUnusedFontFaces(), i.options.keyframes && i.removeUnusedKeyframes(), i.options.variables && i.removeUnusedCSSVariables(), i.options.rejected && i.selectorsRemoved.size > 0 && (c.messages.push({\n    type: \"purgecss\",\n    plugin: \"postcss-purgecss\",\n    text: `purging ${i.selectorsRemoved.size} selectors:\\n          ${Array.from(i.selectorsRemoved).map(e => e.trim()).join(\"\\n  \")}`\n  }), i.selectorsRemoved.clear());\n}\n\nconst c = function (e) {\n  if (void 0 === e) throw new Error(\"PurgeCSS plugin does not have the correct options\");\n  return {\n    postcssPlugin: \"postcss-purgecss\",\n    Once: (o, t) => n(e, o, t)\n  };\n};\n\nc.postcss = !0;\nvar i,\n    u = function (e) {\n  return void 0 !== e.Root;\n}(i = e) ? c : i.plugin(\"postcss-purgecss\", e => {\n  if (void 0 === e) throw new Error(\"PurgeCSS plugin does not have the correct options\");\n  return async function (o, t) {\n    return n(e, o, t);\n  };\n});\nexport default u;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/@fullhuman/postcss-purgecss/lib/postcss-purgecss.esm.js"],"names":["e","o","defaultOptions","t","standardizeSafelist","s","mergeExtractorSelectors","r","n","result","c","i","u","safelist","contentFunction","content","source","input","file","options","p","extractors","a","l","filter","f","m","extractSelectorsFromFiles","g","extractSelectorsFromString","d","walkThroughCSS","fontFace","removeUnusedFontFaces","keyframes","removeUnusedKeyframes","variables","removeUnusedCSSVariables","rejected","selectorsRemoved","size","messages","push","type","plugin","text","Array","from","map","trim","join","clear","Error","postcssPlugin","Once","postcss","Root"],"mappings":"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","sourcesContent":["import e from\"postcss\";import o,{defaultOptions as t,standardizeSafelist as s,mergeExtractorSelectors as r}from\"purgecss\";async function n(e,n,{result:c}){const i=new o,u={...t,...e,safelist:s(null==e?void 0:e.safelist)};e&&\"function\"==typeof e.contentFunction&&(u.content=e.contentFunction(n.source&&n.source.input.file||\"\")),i.options=u;const{content:p,extractors:a}=u,l=p.filter((e=>\"string\"==typeof e)),f=p.filter((e=>\"object\"==typeof e)),m=await i.extractSelectorsFromFiles(l,a),g=await i.extractSelectorsFromString(f,a),d=r(m,g);i.walkThroughCSS(n,d),i.options.fontFace&&i.removeUnusedFontFaces(),i.options.keyframes&&i.removeUnusedKeyframes(),i.options.variables&&i.removeUnusedCSSVariables(),i.options.rejected&&i.selectorsRemoved.size>0&&(c.messages.push({type:\"purgecss\",plugin:\"postcss-purgecss\",text:`purging ${i.selectorsRemoved.size} selectors:\\n          ${Array.from(i.selectorsRemoved).map((e=>e.trim())).join(\"\\n  \")}`}),i.selectorsRemoved.clear())}const c=function(e){if(void 0===e)throw new Error(\"PurgeCSS plugin does not have the correct options\");return{postcssPlugin:\"postcss-purgecss\",Once:(o,t)=>n(e,o,t)}};c.postcss=!0;var i,u=function(e){return void 0!==e.Root}(i=e)?c:i.plugin(\"postcss-purgecss\",(e=>{if(void 0===e)throw new Error(\"PurgeCSS plugin does not have the correct options\");return async function(o,t){return n(e,o,t)}}));export default u;\n"]},"metadata":{},"sourceType":"module"}