{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\n\nvar list = {\n  split: function split(string, separators, last) {\n    var array = [];\n    var current = '';\n    var split = false;\n    var func = 0;\n    var quote = false;\n    var escape = false;\n\n    for (var i = 0; i < string.length; i++) {\n      var letter = string[i];\n\n      if (quote) {\n        if (escape) {\n          escape = false;\n        } else if (letter === '\\\\') {\n          escape = true;\n        } else if (letter === quote) {\n          quote = false;\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true;\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string - space-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space: function space(string) {\n    var spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string - comma-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma: function comma(string) {\n    var comma = ',';\n    return list.split(string, [comma], true);\n  }\n};\nexports.default = list;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["list.es6"],"names":["list","split","array","current","func","quote","escape","i","string","letter","separators","last","space","spaces","comma"],"mappings":";;;AAAA;;;;;;;;;;AASA,IAAIA,IAAAA,GAAO;AAEPC,EAAAA,KAFO,EAAA,SAAA,KAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA,EAEyB;AAC5B,QAAIC,KAAAA,GAAJ,EAAA;AACA,QAAIC,OAAAA,GAAJ,EAAA;AACA,QAAIF,KAAAA,GAAJ,KAAA;AAEA,QAAIG,IAAAA,GAAJ,CAAA;AACA,QAAIC,KAAAA,GAAJ,KAAA;AACA,QAAIC,MAAAA,GAAJ,KAAA;;AAEA,SAAM,IAAIC,CAAAA,GAAV,CAAA,EAAiBA,CAAAA,GAAIC,MAAAA,CAArB,MAAA,EAAoCD,CAApC,EAAA,EAA0C;AACtC,UAAIE,MAAAA,GAASD,MAAAA,CAAb,CAAaA,CAAb;;AAEA,UAAA,KAAA,EAAa;AACT,YAAA,MAAA,EAAc;AACVF,UAAAA,MAAAA,GAAAA,KAAAA;AADJ,SAAA,MAEO,IAAKG,MAAAA,KAAL,IAAA,EAAuB;AAC1BH,UAAAA,MAAAA,GAAAA,IAAAA;AADG,SAAA,MAEA,IAAKG,MAAAA,KAAL,KAAA,EAAwB;AAC3BJ,UAAAA,KAAAA,GAAAA,KAAAA;AACH;AAPL,OAAA,MAQO,IAAKI,MAAAA,KAAAA,GAAAA,IAAkBA,MAAAA,KAAvB,IAAA,EAAyC;AAC5CJ,QAAAA,KAAAA,GAAAA,MAAAA;AADG,OAAA,MAEA,IAAKI,MAAAA,KAAL,GAAA,EAAsB;AACzBL,QAAAA,IAAAA,IAAAA,CAAAA;AADG,OAAA,MAEA,IAAKK,MAAAA,KAAL,GAAA,EAAsB;AACzB,YAAKL,IAAAA,GAAL,CAAA,EAAgBA,IAAAA,IAAAA,CAAAA;AADb,OAAA,MAEA,IAAKA,IAAAA,KAAL,CAAA,EAAkB;AACrB,YAAKM,UAAAA,CAAAA,OAAAA,CAAAA,MAAAA,MAA+B,CAApC,CAAA,EAAyCT,KAAAA,GAAAA,IAAAA;AAC5C;;AAED,UAAA,KAAA,EAAa;AACT,YAAKE,OAAAA,KAAL,EAAA,EAAsBD,KAAAA,CAAAA,IAAAA,CAAWC,OAAAA,CAAXD,IAAWC,EAAXD;AACtBC,QAAAA,OAAAA,GAAAA,EAAAA;AACAF,QAAAA,KAAAA,GAAAA,KAAAA;AAHJ,OAAA,MAIO;AACHE,QAAAA,OAAAA,IAAAA,MAAAA;AACH;AACJ;;AAED,QAAKQ,IAAAA,IAAQR,OAAAA,KAAb,EAAA,EAA8BD,KAAAA,CAAAA,IAAAA,CAAWC,OAAAA,CAAXD,IAAWC,EAAXD;AAC9B,WAAA,KAAA;AA1CG,GAAA;;AA6CP;;;;;;;;;;;AAWAU,EAAAA,KAxDO,EAAA,SAAA,KAAA,CAAA,MAAA,EAwDO;AACV,QAAIC,MAAAA,GAAS,CAAA,GAAA,EAAA,IAAA,EAAb,IAAa,CAAb;AACA,WAAOb,IAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAAP,MAAOA,CAAP;AA1DG,GAAA;;AA6DP;;;;;;;;;;;;AAYAc,EAAAA,KAzEO,EAAA,SAAA,KAAA,CAAA,MAAA,EAyEO;AACV,QAAIA,KAAAA,GAAJ,GAAA;AACA,WAAOd,IAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAAmB,CAAnBA,KAAmB,CAAnBA,EAAP,IAAOA,CAAP;AACH;AA5EM,CAAX;kBAgFeA,I","sourcesContent":["/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\nlet list = {\n\n    split(string, separators, last) {\n        let array   = [];\n        let current = '';\n        let split   = false;\n\n        let func    = 0;\n        let quote   = false;\n        let escape  = false;\n\n        for ( let i = 0; i < string.length; i++ ) {\n            let letter = string[i];\n\n            if ( quote ) {\n                if ( escape ) {\n                    escape = false;\n                } else if ( letter === '\\\\' ) {\n                    escape = true;\n                } else if ( letter === quote ) {\n                    quote = false;\n                }\n            } else if ( letter === '\"' || letter === '\\'' ) {\n                quote = letter;\n            } else if ( letter === '(' ) {\n                func += 1;\n            } else if ( letter === ')' ) {\n                if ( func > 0 ) func -= 1;\n            } else if ( func === 0 ) {\n                if ( separators.indexOf(letter) !== -1 ) split = true;\n            }\n\n            if ( split ) {\n                if ( current !== '' ) array.push(current.trim());\n                current = '';\n                split   = false;\n            } else {\n                current += letter;\n            }\n        }\n\n        if ( last || current !== '' ) array.push(current.trim());\n        return array;\n    },\n\n    /**\n     * Safely splits space-separated values (such as those for `background`,\n     * `border-radius`, and other shorthand properties).\n     *\n     * @param {string} string - space-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n     */\n    space(string) {\n        let spaces = [' ', '\\n', '\\t'];\n        return list.split(string, spaces);\n    },\n\n    /**\n     * Safely splits comma-separated values (such as those for `transition-*`\n     * and `background` properties).\n     *\n     * @param {string} string - comma-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.comma('black, linear-gradient(white, black)')\n     * //=> ['black', 'linear-gradient(white, black)']\n     */\n    comma(string) {\n        let comma = ',';\n        return list.split(string, [comma], true);\n    }\n\n};\n\nexport default list;\n"]},"metadata":{},"sourceType":"script"}