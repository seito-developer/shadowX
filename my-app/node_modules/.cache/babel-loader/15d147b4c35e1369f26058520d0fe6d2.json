{"ast":null,"code":"var _jsxFileName = \"/Users/seito/Documents/develop/count-jp/my-app/src/App.tsx\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport textToSpeech from '@google-cloud/text-to-speech';\nimport fs from 'fs';\nimport util from 'util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const client = new textToSpeech.TextToSpeechClient();\n\n  async function quickStart() {\n    // The text to synthesize\n    const text = 'hello, world!'; // Construct the request\n\n    const request = {\n      input: {\n        text: text\n      },\n      // Select the language and SSML voice gender (optional)\n      voice: {\n        languageCode: 'en-US',\n        ssmlGender: 'NEUTRAL'\n      },\n      // select the type of audio encoding\n      audioConfig: {\n        audioEncoding: 'MP3'\n      }\n    }; // Performs the text-to-speech request\n\n    const [response] = await client.synthesizeSpeech(request); // Write the binary audio content to a local file\n\n    const writeFile = util.promisify(fs.writeFile);\n    await writeFile('output.mp3', response.audioContent, 'binary');\n    console.log('Audio content written to file: output.mp3');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.tsx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/src/App.tsx"],"names":["React","textToSpeech","fs","util","App","client","TextToSpeechClient","quickStart","text","request","input","voice","languageCode","ssmlGender","audioConfig","audioEncoding","response","synthesizeSpeech","writeFile","promisify","audioContent","console","log","logo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,MAAM,GAAG,IAAIJ,YAAY,CAACK,kBAAjB,EAAf;;AACA,iBAAeC,UAAf,GAA4B;AAC1B;AACA,UAAMC,IAAI,GAAG,eAAb,CAF0B,CAI1B;;AACA,UAAMC,OAAO,GAAG;AACdC,MAAAA,KAAK,EAAE;AAACF,QAAAA,IAAI,EAAEA;AAAP,OADO;AAEd;AACAG,MAAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE,OAAf;AAAwBC,QAAAA,UAAU,EAAE;AAApC,OAHO;AAId;AACAC,MAAAA,WAAW,EAAE;AAACC,QAAAA,aAAa,EAAE;AAAhB;AALC,KAAhB,CAL0B,CAa1B;;AACA,UAAM,CAACC,QAAD,IAAa,MAAMX,MAAM,CAACY,gBAAP,CAAwBR,OAAxB,CAAzB,CAd0B,CAe1B;;AACA,UAAMS,SAAS,GAAGf,IAAI,CAACgB,SAAL,CAAejB,EAAE,CAACgB,SAAlB,CAAlB;AACA,UAAMA,SAAS,CAAC,YAAD,EAAeF,QAAQ,CAACI,YAAxB,EAAsC,QAAtC,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEC,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,yCACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,IAAI,EAAC,qBAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;KAzCQnB,G;AA2CT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport textToSpeech from '@google-cloud/text-to-speech';\nimport fs from 'fs';\nimport util from 'util';\n\nfunction App() {\n  const client = new textToSpeech.TextToSpeechClient();\n  async function quickStart() {\n    // The text to synthesize\n    const text = 'hello, world!';\n\n    // Construct the request\n    const request = {\n      input: {text: text},\n      // Select the language and SSML voice gender (optional)\n      voice: {languageCode: 'en-US', ssmlGender: 'NEUTRAL'},\n      // select the type of audio encoding\n      audioConfig: {audioEncoding: 'MP3'},\n    };\n\n    // Performs the text-to-speech request\n    const [response] = await client.synthesizeSpeech(request);\n    // Write the binary audio content to a local file\n    const writeFile = util.promisify(fs.writeFile);\n    await writeFile('output.mp3', response.audioContent, 'binary');\n    console.log('Audio content written to file: output.mp3');\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}