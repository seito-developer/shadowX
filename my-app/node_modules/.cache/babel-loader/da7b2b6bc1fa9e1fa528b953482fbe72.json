{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = wrapWithVariants;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"./cloneNodes\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction wrapWithVariants(rules, variants) {\n  let foundVariantAtRule = false;\n\n  _postcss.default.root({\n    nodes: rules\n  }).walkAtRules('variants', () => {\n    foundVariantAtRule = true;\n  });\n\n  if (foundVariantAtRule) {\n    return (0, _cloneNodes.default)(rules);\n  }\n\n  return _postcss.default.atRule({\n    name: 'variants',\n    params: variants.join(', ')\n  }).append((0, _cloneNodes.default)(Array.isArray(rules) ? rules : [rules]));\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/util/wrapWithVariants.js"],"names":["Object","defineProperty","exports","value","default","wrapWithVariants","_postcss","_interopRequireDefault","require","_cloneNodes","obj","__esModule","rules","variants","foundVariantAtRule","root","nodes","walkAtRules","atRule","name","params","join","append","Array","isArray"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gBAAlB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAArC;;AAEA,IAAIC,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,SAASL,gBAAT,CAA0BO,KAA1B,EAAiCC,QAAjC,EAA2C;AACzC,MAAIC,kBAAkB,GAAG,KAAzB;;AAEAR,EAAAA,QAAQ,CAACF,OAAT,CAAiBW,IAAjB,CAAsB;AACpBC,IAAAA,KAAK,EAAEJ;AADa,GAAtB,EAEGK,WAFH,CAEe,UAFf,EAE2B,MAAM;AAC/BH,IAAAA,kBAAkB,GAAG,IAArB;AACD,GAJD;;AAMA,MAAIA,kBAAJ,EAAwB;AACtB,WAAO,CAAC,GAAGL,WAAW,CAACL,OAAhB,EAAyBQ,KAAzB,CAAP;AACD;;AAED,SAAON,QAAQ,CAACF,OAAT,CAAiBc,MAAjB,CAAwB;AAC7BC,IAAAA,IAAI,EAAE,UADuB;AAE7BC,IAAAA,MAAM,EAAEP,QAAQ,CAACQ,IAAT,CAAc,IAAd;AAFqB,GAAxB,EAGJC,MAHI,CAGG,CAAC,GAAGb,WAAW,CAACL,OAAhB,EAAyBmB,KAAK,CAACC,OAAN,CAAcZ,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAxD,CAHH,CAAP;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = wrapWithVariants;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"./cloneNodes\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction wrapWithVariants(rules, variants) {\n  let foundVariantAtRule = false;\n\n  _postcss.default.root({\n    nodes: rules\n  }).walkAtRules('variants', () => {\n    foundVariantAtRule = true;\n  });\n\n  if (foundVariantAtRule) {\n    return (0, _cloneNodes.default)(rules);\n  }\n\n  return _postcss.default.atRule({\n    name: 'variants',\n    params: variants.join(', ')\n  }).append((0, _cloneNodes.default)(Array.isArray(rules) ? rules : [rules]));\n}"]},"metadata":{},"sourceType":"script"}