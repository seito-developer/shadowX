{"ast":null,"code":"/**\n * @module lib/postmessage\n */\nimport { getCallbacks, removeCallback, shiftCallbacks } from './callbacks';\n/**\n * Parse a message received from postMessage.\n *\n * @param {*} data The data received from postMessage.\n * @return {object}\n */\n\nexport function parseMessageData(data) {\n  if (typeof data === 'string') {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      // If the message cannot be parsed, throw the error as a warning\n      console.warn(error);\n      return {};\n    }\n  }\n\n  return data;\n}\n/**\n * Post a message to the specified target.\n *\n * @param {Player} player The player object to use.\n * @param {string} method The API method to call.\n * @param {object} params The parameters to send to the player.\n * @return {void}\n */\n\nexport function postMessage(player, method, params) {\n  if (!player.element.contentWindow || !player.element.contentWindow.postMessage) {\n    return;\n  }\n\n  let message = {\n    method\n  };\n\n  if (params !== undefined) {\n    message.value = params;\n  } // IE 8 and 9 do not support passing messages, so stringify them\n\n\n  const ieVersion = parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\\d+).*$/, '$1'));\n\n  if (ieVersion >= 8 && ieVersion < 10) {\n    message = JSON.stringify(message);\n  }\n\n  player.element.contentWindow.postMessage(message, player.origin);\n}\n/**\n * Parse the data received from a message event.\n *\n * @param {Player} player The player that received the message.\n * @param {(Object|string)} data The message data. Strings will be parsed into JSON.\n * @return {void}\n */\n\nexport function processData(player, data) {\n  data = parseMessageData(data);\n  let callbacks = [];\n  let param;\n\n  if (data.event) {\n    if (data.event === 'error') {\n      const promises = getCallbacks(player, data.data.method);\n      promises.forEach(promise => {\n        const error = new Error(data.data.message);\n        error.name = data.data.name;\n        promise.reject(error);\n        removeCallback(player, data.data.method, promise);\n      });\n    }\n\n    callbacks = getCallbacks(player, `event:${data.event}`);\n    param = data.data;\n  } else if (data.method) {\n    const callback = shiftCallbacks(player, data.method);\n\n    if (callback) {\n      callbacks.push(callback);\n      param = data.value;\n    }\n  }\n\n  callbacks.forEach(callback => {\n    try {\n      if (typeof callback === 'function') {\n        callback.call(player, param);\n        return;\n      }\n\n      callback.resolve(param);\n    } catch (e) {// empty\n    }\n  });\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/shadowX/my-app/node_modules/@vimeo/player/src/lib/postmessage.js"],"names":["getCallbacks","removeCallback","shiftCallbacks","parseMessageData","data","JSON","parse","error","console","warn","postMessage","player","method","params","element","contentWindow","message","undefined","value","ieVersion","parseFloat","navigator","userAgent","toLowerCase","replace","stringify","origin","processData","callbacks","param","event","promises","forEach","promise","Error","name","reject","callback","push","call","resolve","e"],"mappings":"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","sourcesContent":["/**\n * @module lib/postmessage\n */\n\nimport { getCallbacks, removeCallback, shiftCallbacks } from './callbacks';\n\n/**\n * Parse a message received from postMessage.\n *\n * @param {*} data The data received from postMessage.\n * @return {object}\n */\nexport function parseMessageData(data) {\n    if (typeof data === 'string') {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            // If the message cannot be parsed, throw the error as a warning\n            console.warn(error);\n            return {};\n        }\n    }\n\n    return data;\n}\n\n/**\n * Post a message to the specified target.\n *\n * @param {Player} player The player object to use.\n * @param {string} method The API method to call.\n * @param {object} params The parameters to send to the player.\n * @return {void}\n */\nexport function postMessage(player, method, params) {\n    if (!player.element.contentWindow || !player.element.contentWindow.postMessage) {\n        return;\n    }\n\n    let message = {\n        method\n    };\n\n    if (params !== undefined) {\n        message.value = params;\n    }\n\n    // IE 8 and 9 do not support passing messages, so stringify them\n    const ieVersion = parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\\d+).*$/, '$1'));\n    if (ieVersion >= 8 && ieVersion < 10) {\n        message = JSON.stringify(message);\n    }\n\n    player.element.contentWindow.postMessage(message, player.origin);\n}\n\n/**\n * Parse the data received from a message event.\n *\n * @param {Player} player The player that received the message.\n * @param {(Object|string)} data The message data. Strings will be parsed into JSON.\n * @return {void}\n */\nexport function processData(player, data) {\n    data = parseMessageData(data);\n    let callbacks = [];\n    let param;\n\n    if (data.event) {\n        if (data.event === 'error') {\n            const promises = getCallbacks(player, data.data.method);\n\n            promises.forEach((promise) => {\n                const error = new Error(data.data.message);\n                error.name = data.data.name;\n\n                promise.reject(error);\n                removeCallback(player, data.data.method, promise);\n            });\n        }\n\n        callbacks = getCallbacks(player, `event:${data.event}`);\n        param = data.data;\n    }\n    else if (data.method) {\n        const callback = shiftCallbacks(player, data.method);\n\n        if (callback) {\n            callbacks.push(callback);\n            param = data.value;\n        }\n    }\n\n    callbacks.forEach((callback) => {\n        try {\n            if (typeof callback === 'function') {\n                callback.call(player, param);\n                return;\n            }\n\n            callback.resolve(param);\n        }\n        catch (e) {\n            // empty\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}