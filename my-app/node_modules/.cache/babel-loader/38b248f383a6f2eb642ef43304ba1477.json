{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flagEnabled = flagEnabled;\nexports.issueFlagNotices = issueFlagNotices;\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _log = _interopRequireDefault(require(\"./util/log\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst featureFlags = {\n  future: [],\n  experimental: []\n};\n\nfunction flagEnabled(config, flag) {\n  if (featureFlags.future.includes(flag)) {\n    return config.future === 'all' || _lodash.default.get(config, ['future', flag], false);\n  }\n\n  if (featureFlags.experimental.includes(flag)) {\n    return config.experimental === 'all' || _lodash.default.get(config, ['experimental', flag], false);\n  }\n\n  return false;\n}\n\nfunction experimentalFlagsEnabled(config) {\n  if (config.experimental === 'all') {\n    return featureFlags.experimental;\n  }\n\n  return Object.keys(_lodash.default.get(config, 'experimental', {})).filter(flag => featureFlags.experimental.includes(flag) && config.experimental[flag]);\n}\n\nfunction issueFlagNotices(config) {\n  if (process.env.JEST_WORKER_ID !== undefined) {\n    return;\n  }\n\n  if (experimentalFlagsEnabled(config).length > 0) {\n    const changes = experimentalFlagsEnabled(config).map(s => _chalk.default.yellow(s)).join(', ');\n\n    _log.default.warn([`You have enabled experimental features: ${changes}`, 'Experimental features are not covered by semver, may introduce breaking changes, and can change at any time.']);\n  }\n}\n\nvar _default = featureFlags;\nexports.default = _default;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/featureFlags.js"],"names":["Object","defineProperty","exports","value","flagEnabled","issueFlagNotices","default","_lodash","_interopRequireDefault","require","_chalk","_log","obj","__esModule","featureFlags","future","experimental","config","flag","includes","get","experimentalFlagsEnabled","keys","filter","process","env","JEST_WORKER_ID","undefined","length","changes","map","s","yellow","join","warn","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;AACAF,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;AACAH,OAAO,CAACI,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,IAAIC,MAAM,GAAGF,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAIE,IAAI,GAAGH,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAjC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,MAAME,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,YAAY,EAAE;AAFK,CAArB;;AAKA,SAASZ,WAAT,CAAqBa,MAArB,EAA6BC,IAA7B,EAAmC;AACjC,MAAIJ,YAAY,CAACC,MAAb,CAAoBI,QAApB,CAA6BD,IAA7B,CAAJ,EAAwC;AACtC,WAAOD,MAAM,CAACF,MAAP,KAAkB,KAAlB,IAA2BR,OAAO,CAACD,OAAR,CAAgBc,GAAhB,CAAoBH,MAApB,EAA4B,CAAC,QAAD,EAAWC,IAAX,CAA5B,EAA8C,KAA9C,CAAlC;AACD;;AAED,MAAIJ,YAAY,CAACE,YAAb,CAA0BG,QAA1B,CAAmCD,IAAnC,CAAJ,EAA8C;AAC5C,WAAOD,MAAM,CAACD,YAAP,KAAwB,KAAxB,IAAiCT,OAAO,CAACD,OAAR,CAAgBc,GAAhB,CAAoBH,MAApB,EAA4B,CAAC,cAAD,EAAiBC,IAAjB,CAA5B,EAAoD,KAApD,CAAxC;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASG,wBAAT,CAAkCJ,MAAlC,EAA0C;AACxC,MAAIA,MAAM,CAACD,YAAP,KAAwB,KAA5B,EAAmC;AACjC,WAAOF,YAAY,CAACE,YAApB;AACD;;AAED,SAAOhB,MAAM,CAACsB,IAAP,CAAYf,OAAO,CAACD,OAAR,CAAgBc,GAAhB,CAAoBH,MAApB,EAA4B,cAA5B,EAA4C,EAA5C,CAAZ,EAA6DM,MAA7D,CAAoEL,IAAI,IAAIJ,YAAY,CAACE,YAAb,CAA0BG,QAA1B,CAAmCD,IAAnC,KAA4CD,MAAM,CAACD,YAAP,CAAoBE,IAApB,CAAxH,CAAP;AACD;;AAED,SAASb,gBAAT,CAA0BY,MAA1B,EAAkC;AAChC,MAAIO,OAAO,CAACC,GAAR,CAAYC,cAAZ,KAA+BC,SAAnC,EAA8C;AAC5C;AACD;;AAED,MAAIN,wBAAwB,CAACJ,MAAD,CAAxB,CAAiCW,MAAjC,GAA0C,CAA9C,EAAiD;AAC/C,UAAMC,OAAO,GAAGR,wBAAwB,CAACJ,MAAD,CAAxB,CAAiCa,GAAjC,CAAqCC,CAAC,IAAIrB,MAAM,CAACJ,OAAP,CAAe0B,MAAf,CAAsBD,CAAtB,CAA1C,EAAoEE,IAApE,CAAyE,IAAzE,CAAhB;;AAEAtB,IAAAA,IAAI,CAACL,OAAL,CAAa4B,IAAb,CAAkB,CAAE,2CAA0CL,OAAQ,EAApD,EAAuD,8GAAvD,CAAlB;AACD;AACF;;AAED,IAAIM,QAAQ,GAAGrB,YAAf;AACAZ,OAAO,CAACI,OAAR,GAAkB6B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flagEnabled = flagEnabled;\nexports.issueFlagNotices = issueFlagNotices;\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _log = _interopRequireDefault(require(\"./util/log\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst featureFlags = {\n  future: [],\n  experimental: []\n};\n\nfunction flagEnabled(config, flag) {\n  if (featureFlags.future.includes(flag)) {\n    return config.future === 'all' || _lodash.default.get(config, ['future', flag], false);\n  }\n\n  if (featureFlags.experimental.includes(flag)) {\n    return config.experimental === 'all' || _lodash.default.get(config, ['experimental', flag], false);\n  }\n\n  return false;\n}\n\nfunction experimentalFlagsEnabled(config) {\n  if (config.experimental === 'all') {\n    return featureFlags.experimental;\n  }\n\n  return Object.keys(_lodash.default.get(config, 'experimental', {})).filter(flag => featureFlags.experimental.includes(flag) && config.experimental[flag]);\n}\n\nfunction issueFlagNotices(config) {\n  if (process.env.JEST_WORKER_ID !== undefined) {\n    return;\n  }\n\n  if (experimentalFlagsEnabled(config).length > 0) {\n    const changes = experimentalFlagsEnabled(config).map(s => _chalk.default.yellow(s)).join(', ');\n\n    _log.default.warn([`You have enabled experimental features: ${changes}`, 'Experimental features are not covered by semver, may introduce breaking changes, and can change at any time.']);\n  }\n}\n\nvar _default = featureFlags;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}