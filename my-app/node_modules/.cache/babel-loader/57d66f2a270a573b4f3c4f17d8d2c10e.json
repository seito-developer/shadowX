{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _lazyResult = require('./lazy-result');\n\nvar _lazyResult2 = _interopRequireDefault(_lazyResult);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Contains plugins to process CSS. Create one `Processor` instance,\n * initialize its plugins, and then use that instance on numerous CSS files.\n *\n * @example\n * const processor = postcss([autoprefixer, precss]);\n * processor.process(css1).then(result => console.log(result.css));\n * processor.process(css2).then(result => console.log(result.css));\n */\n\n\nvar Processor = function () {\n  /**\n   * @param {Array.<Plugin|pluginFunction>|Processor} plugins - PostCSS\n   *        plugins. See {@link Processor#use} for plugin format.\n   */\n  function Processor() {\n    var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, Processor);\n    /**\n     * @member {string} - Current PostCSS version.\n     *\n     * @example\n     * if ( result.processor.version.split('.')[0] !== '6' ) {\n     *   throw new Error('This plugin works only with PostCSS 6');\n     * }\n     */\n\n\n    this.version = '6.0.23';\n    /**\n     * @member {pluginFunction[]} - Plugins added to this processor.\n     *\n     * @example\n     * const processor = postcss([autoprefixer, precss]);\n     * processor.plugins.length //=> 2\n     */\n\n    this.plugins = this.normalize(plugins);\n  }\n  /**\n   * Adds a plugin to be used as a CSS processor.\n   *\n   * PostCSS plugin can be in 4 formats:\n   * * A plugin created by {@link postcss.plugin} method.\n   * * A function. PostCSS will pass the function a @{link Root}\n   *   as the first argument and current {@link Result} instance\n   *   as the second.\n   * * An object with a `postcss` method. PostCSS will use that method\n   *   as described in #2.\n   * * Another {@link Processor} instance. PostCSS will copy plugins\n   *   from that instance into this one.\n   *\n   * Plugins can also be added by passing them as arguments when creating\n   * a `postcss` instance (see [`postcss(plugins)`]).\n   *\n   * Asynchronous plugins should return a `Promise` instance.\n   *\n   * @param {Plugin|pluginFunction|Processor} plugin - PostCSS plugin\n   *                                                   or {@link Processor}\n   *                                                   with plugins\n   *\n   * @example\n   * const processor = postcss()\n   *   .use(autoprefixer)\n   *   .use(precss);\n   *\n   * @return {Processes} current processor to make methods chain\n   */\n\n\n  Processor.prototype.use = function use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]));\n    return this;\n  };\n  /**\n   * Parses source CSS and returns a {@link LazyResult} Promise proxy.\n   * Because some plugins can be asynchronous it doesn’t make\n   * any transformations. Transformations will be applied\n   * in the {@link LazyResult} methods.\n   *\n   * @param {string|toString|Result} css - String with input CSS or\n   *                                       any object with a `toString()`\n   *                                       method, like a Buffer.\n   *                                       Optionally, send a {@link Result}\n   *                                       instance and the processor will\n   *                                       take the {@link Root} from it.\n   * @param {processOptions} [opts]      - options\n   *\n   * @return {LazyResult} Promise proxy\n   *\n   * @example\n   * processor.process(css, { from: 'a.css', to: 'a.out.css' })\n   *   .then(result => {\n   *      console.log(result.css);\n   *   });\n   */\n\n\n  Processor.prototype.process = function process(css) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new _lazyResult2.default(this, css, opts);\n  };\n\n  Processor.prototype.normalize = function normalize(plugins) {\n    var normalized = [];\n\n    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var i = _ref;\n      if (i.postcss) i = i.postcss;\n\n      if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins);\n      } else if (typeof i === 'function') {\n        normalized.push(i);\n      } else if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object' && (i.parse || i.stringify)) {\n        throw new Error('PostCSS syntaxes cannot be used as plugins. ' + 'Instead, please use one of the ' + 'syntax/parser/stringifier options as ' + 'outlined in your PostCSS ' + 'runner documentation.');\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin');\n      }\n    }\n\n    return normalized;\n  };\n\n  return Processor;\n}();\n\nexports.default = Processor;\n/**\n * @callback builder\n * @param {string} part          - part of generated CSS connected to this node\n * @param {Node}   node          - AST node\n * @param {\"start\"|\"end\"} [type] - node’s part type\n */\n\n/**\n * @callback parser\n *\n * @param {string|toString} css   - string with input CSS or any object\n *                                  with toString() method, like a Buffer\n * @param {processOptions} [opts] - options with only `from` and `map` keys\n *\n * @return {Root} PostCSS AST\n */\n\n/**\n * @callback stringifier\n *\n * @param {Node} node       - start node for stringifing. Usually {@link Root}.\n * @param {builder} builder - function to concatenate CSS from node’s parts\n *                            or generate string and source map\n *\n * @return {void}\n */\n\n/**\n * @typedef {object} syntax\n * @property {parser} parse          - function to generate AST by string\n * @property {stringifier} stringify - function to generate string by AST\n */\n\n/**\n * @typedef {object} toString\n * @property {function} toString\n */\n\n/**\n * @callback pluginFunction\n * @param {Root} root     - parsed input CSS\n * @param {Result} result - result to set warnings or check other plugins\n */\n\n/**\n * @typedef {object} Plugin\n * @property {function} postcss - PostCSS plugin function\n */\n\n/**\n * @typedef {object} processOptions\n * @property {string} from             - the path of the CSS source file.\n *                                       You should always set `from`,\n *                                       because it is used in source map\n *                                       generation and syntax error messages.\n * @property {string} to               - the path where you’ll put the output\n *                                       CSS file. You should always set `to`\n *                                       to generate correct source maps.\n * @property {parser} parser           - function to generate AST by string\n * @property {stringifier} stringifier - class to generate string by AST\n * @property {syntax} syntax           - object with `parse` and `stringify`\n * @property {object} map              - source map options\n * @property {boolean} map.inline                    - does source map should\n *                                                     be embedded in the output\n *                                                     CSS as a base64-encoded\n *                                                     comment\n * @property {string|object|false|function} map.prev - source map content\n *                                                     from a previous\n *                                                     processing step\n *                                                     (for example, Sass).\n *                                                     PostCSS will try to find\n *                                                     previous map\n *                                                     automatically, so you\n *                                                     could disable it by\n *                                                     `false` value.\n * @property {boolean} map.sourcesContent            - does PostCSS should set\n *                                                     the origin content to map\n * @property {string|false} map.annotation           - does PostCSS should set\n *                                                     annotation comment to map\n * @property {string} map.from                       - override `from` in map’s\n *                                                     `sources`\n */\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["processor.es6"],"names":["Processor","plugins","use","plugin","process","css","opts","LazyResult","normalize","normalized","i","Array"],"mappings":"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","sourcesContent":["import LazyResult from './lazy-result';\n\n/**\n * Contains plugins to process CSS. Create one `Processor` instance,\n * initialize its plugins, and then use that instance on numerous CSS files.\n *\n * @example\n * const processor = postcss([autoprefixer, precss]);\n * processor.process(css1).then(result => console.log(result.css));\n * processor.process(css2).then(result => console.log(result.css));\n */\nclass Processor {\n\n    /**\n     * @param {Array.<Plugin|pluginFunction>|Processor} plugins - PostCSS\n     *        plugins. See {@link Processor#use} for plugin format.\n     */\n    constructor(plugins = []) {\n        /**\n         * @member {string} - Current PostCSS version.\n         *\n         * @example\n         * if ( result.processor.version.split('.')[0] !== '6' ) {\n         *   throw new Error('This plugin works only with PostCSS 6');\n         * }\n         */\n        this.version = '6.0.23';\n        /**\n         * @member {pluginFunction[]} - Plugins added to this processor.\n         *\n         * @example\n         * const processor = postcss([autoprefixer, precss]);\n         * processor.plugins.length //=> 2\n         */\n        this.plugins = this.normalize(plugins);\n    }\n\n    /**\n     * Adds a plugin to be used as a CSS processor.\n     *\n     * PostCSS plugin can be in 4 formats:\n     * * A plugin created by {@link postcss.plugin} method.\n     * * A function. PostCSS will pass the function a @{link Root}\n     *   as the first argument and current {@link Result} instance\n     *   as the second.\n     * * An object with a `postcss` method. PostCSS will use that method\n     *   as described in #2.\n     * * Another {@link Processor} instance. PostCSS will copy plugins\n     *   from that instance into this one.\n     *\n     * Plugins can also be added by passing them as arguments when creating\n     * a `postcss` instance (see [`postcss(plugins)`]).\n     *\n     * Asynchronous plugins should return a `Promise` instance.\n     *\n     * @param {Plugin|pluginFunction|Processor} plugin - PostCSS plugin\n     *                                                   or {@link Processor}\n     *                                                   with plugins\n     *\n     * @example\n     * const processor = postcss()\n     *   .use(autoprefixer)\n     *   .use(precss);\n     *\n     * @return {Processes} current processor to make methods chain\n     */\n    use(plugin) {\n        this.plugins = this.plugins.concat(this.normalize([plugin]));\n        return this;\n    }\n\n    /**\n     * Parses source CSS and returns a {@link LazyResult} Promise proxy.\n     * Because some plugins can be asynchronous it doesn’t make\n     * any transformations. Transformations will be applied\n     * in the {@link LazyResult} methods.\n     *\n     * @param {string|toString|Result} css - String with input CSS or\n     *                                       any object with a `toString()`\n     *                                       method, like a Buffer.\n     *                                       Optionally, send a {@link Result}\n     *                                       instance and the processor will\n     *                                       take the {@link Root} from it.\n     * @param {processOptions} [opts]      - options\n     *\n     * @return {LazyResult} Promise proxy\n     *\n     * @example\n     * processor.process(css, { from: 'a.css', to: 'a.out.css' })\n     *   .then(result => {\n     *      console.log(result.css);\n     *   });\n     */\n    process(css, opts = { }) {\n        return new LazyResult(this, css, opts);\n    }\n\n    normalize(plugins) {\n        let normalized = [];\n        for ( let i of plugins ) {\n            if ( i.postcss ) i = i.postcss;\n\n            if ( typeof i === 'object' && Array.isArray(i.plugins) ) {\n                normalized = normalized.concat(i.plugins);\n            } else if ( typeof i === 'function' ) {\n                normalized.push(i);\n            } else if ( typeof i === 'object' && (i.parse || i.stringify) ) {\n                throw new Error('PostCSS syntaxes cannot be used as plugins. ' +\n                                'Instead, please use one of the ' +\n                                'syntax/parser/stringifier options as ' +\n                                'outlined in your PostCSS ' +\n                                'runner documentation.');\n            } else {\n                throw new Error(i + ' is not a PostCSS plugin');\n            }\n        }\n        return normalized;\n    }\n\n}\n\nexport default Processor;\n\n/**\n * @callback builder\n * @param {string} part          - part of generated CSS connected to this node\n * @param {Node}   node          - AST node\n * @param {\"start\"|\"end\"} [type] - node’s part type\n */\n\n/**\n * @callback parser\n *\n * @param {string|toString} css   - string with input CSS or any object\n *                                  with toString() method, like a Buffer\n * @param {processOptions} [opts] - options with only `from` and `map` keys\n *\n * @return {Root} PostCSS AST\n */\n\n/**\n * @callback stringifier\n *\n * @param {Node} node       - start node for stringifing. Usually {@link Root}.\n * @param {builder} builder - function to concatenate CSS from node’s parts\n *                            or generate string and source map\n *\n * @return {void}\n */\n\n/**\n * @typedef {object} syntax\n * @property {parser} parse          - function to generate AST by string\n * @property {stringifier} stringify - function to generate string by AST\n */\n\n/**\n * @typedef {object} toString\n * @property {function} toString\n */\n\n/**\n * @callback pluginFunction\n * @param {Root} root     - parsed input CSS\n * @param {Result} result - result to set warnings or check other plugins\n */\n\n/**\n * @typedef {object} Plugin\n * @property {function} postcss - PostCSS plugin function\n */\n\n/**\n * @typedef {object} processOptions\n * @property {string} from             - the path of the CSS source file.\n *                                       You should always set `from`,\n *                                       because it is used in source map\n *                                       generation and syntax error messages.\n * @property {string} to               - the path where you’ll put the output\n *                                       CSS file. You should always set `to`\n *                                       to generate correct source maps.\n * @property {parser} parser           - function to generate AST by string\n * @property {stringifier} stringifier - class to generate string by AST\n * @property {syntax} syntax           - object with `parse` and `stringify`\n * @property {object} map              - source map options\n * @property {boolean} map.inline                    - does source map should\n *                                                     be embedded in the output\n *                                                     CSS as a base64-encoded\n *                                                     comment\n * @property {string|object|false|function} map.prev - source map content\n *                                                     from a previous\n *                                                     processing step\n *                                                     (for example, Sass).\n *                                                     PostCSS will try to find\n *                                                     previous map\n *                                                     automatically, so you\n *                                                     could disable it by\n *                                                     `false` value.\n * @property {boolean} map.sourcesContent            - does PostCSS should set\n *                                                     the origin content to map\n * @property {string|false} map.annotation           - does PostCSS should set\n *                                                     annotation comment to map\n * @property {string} map.from                       - override `from` in map’s\n *                                                     `sources`\n */\n"]},"metadata":{},"sourceType":"script"}