{"ast":null,"code":"const flattenColorPalette = require('../../lib/util/flattenColorPalette').default;\n\nconst toColorValue = require('../../lib/util/toColorValue').default;\n\nconst {\n  asColor,\n  nameClass\n} = require('../pluginUtils');\n\nmodule.exports = function ({\n  matchUtilities,\n  theme\n}) {\n  let colorPalette = flattenColorPalette(theme('ringOffsetColor'));\n  matchUtilities({\n    'ring-offset': modifier => {\n      let value = asColor(modifier, colorPalette);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('ring-offset', modifier)]: {\n          '--tw-ring-offset-color': toColorValue(value)\n        }\n      };\n    }\n  });\n};","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/jit/corePlugins/ringOffsetColor.js"],"names":["flattenColorPalette","require","default","toColorValue","asColor","nameClass","module","exports","matchUtilities","theme","colorPalette","modifier","value","undefined"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,oCAAD,CAAP,CAA8CC,OAA1E;;AACA,MAAMC,YAAY,GAAGF,OAAO,CAAC,6BAAD,CAAP,CAAuCC,OAA5D;;AACA,MAAM;AAAEE,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAyBJ,OAAO,CAAC,gBAAD,CAAtC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAV,EAAqC;AACpD,MAAIC,YAAY,GAAGV,mBAAmB,CAACS,KAAK,CAAC,iBAAD,CAAN,CAAtC;AAEAD,EAAAA,cAAc,CAAC;AACb,mBAAgBG,QAAD,IAAc;AAC3B,UAAIC,KAAK,GAAGR,OAAO,CAACO,QAAD,EAAWD,YAAX,CAAnB;;AAEA,UAAIE,KAAK,KAAKC,SAAd,EAAyB;AACvB,eAAO,EAAP;AACD;;AAED,aAAO;AACL,SAACR,SAAS,CAAC,aAAD,EAAgBM,QAAhB,CAAV,GAAsC;AACpC,oCAA0BR,YAAY,CAACS,KAAD;AADF;AADjC,OAAP;AAKD;AAbY,GAAD,CAAd;AAeD,CAlBD","sourcesContent":["const flattenColorPalette = require('../../lib/util/flattenColorPalette').default\nconst toColorValue = require('../../lib/util/toColorValue').default\nconst { asColor, nameClass } = require('../pluginUtils')\n\nmodule.exports = function ({ matchUtilities, theme }) {\n  let colorPalette = flattenColorPalette(theme('ringOffsetColor'))\n\n  matchUtilities({\n    'ring-offset': (modifier) => {\n      let value = asColor(modifier, colorPalette)\n\n      if (value === undefined) {\n        return []\n      }\n\n      return {\n        [nameClass('ring-offset', modifier)]: {\n          '--tw-ring-offset-color': toColorValue(value),\n        },\n      }\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"script"}