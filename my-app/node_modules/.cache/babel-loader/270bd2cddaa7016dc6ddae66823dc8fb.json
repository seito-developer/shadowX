{"ast":null,"code":"const postcss = require('postcss');\n\nconst evaluateTailwindFunctions = require('../lib/lib/evaluateTailwindFunctions').default;\n\nconst substituteScreenAtRules = require('../lib/lib/substituteScreenAtRules').default;\n\nconst rewriteTailwindImports = require('./lib/rewriteTailwindImports');\n\nconst setupContext = require('./lib/setupContext');\n\nconst removeLayerAtRules = require('./lib/removeLayerAtRules');\n\nconst expandTailwindAtRules = require('./lib/expandTailwindAtRules');\n\nconst expandApplyAtRules = require('./lib/expandApplyAtRules');\n\nconst collapseAdjacentRules = require('./lib/collapseAdjacentRules');\n\nconst {\n  env\n} = require('./lib/sharedState');\n\nmodule.exports = (configOrPath = {}) => {\n  return [env.DEBUG && function (root) {\n    console.log('\\n');\n    console.time('JIT TOTAL');\n    return root;\n  }, function (root, result) {\n    function registerDependency(fileName, type = 'dependency') {\n      result.messages.push({\n        type,\n        plugin: 'tailwindcss-jit',\n        parent: result.opts.from,\n        file: fileName\n      });\n    }\n\n    rewriteTailwindImports(root);\n    let context = setupContext(configOrPath)(result, root);\n\n    if (!env.TAILWIND_DISABLE_TOUCH) {\n      if (context.configPath !== null) {\n        registerDependency(context.configPath);\n      }\n    }\n\n    return postcss([removeLayerAtRules(context), expandTailwindAtRules(context, registerDependency), expandApplyAtRules(context), evaluateTailwindFunctions(context.tailwindConfig), substituteScreenAtRules(context.tailwindConfig), collapseAdjacentRules(context)]).process(root, {\n      from: undefined\n    });\n  }, env.DEBUG && function (root) {\n    console.timeEnd('JIT TOTAL');\n    console.log('\\n');\n    return root;\n  }].filter(Boolean);\n};\n\nmodule.exports.postcss = true;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/jit/index.js"],"names":["postcss","require","evaluateTailwindFunctions","default","substituteScreenAtRules","rewriteTailwindImports","setupContext","removeLayerAtRules","expandTailwindAtRules","expandApplyAtRules","collapseAdjacentRules","env","module","exports","configOrPath","DEBUG","root","console","log","time","result","registerDependency","fileName","type","messages","push","plugin","parent","opts","from","file","context","TAILWIND_DISABLE_TOUCH","configPath","tailwindConfig","process","undefined","timeEnd","filter","Boolean"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,MAAMC,yBAAyB,GAAGD,OAAO,CAAC,sCAAD,CAAP,CAAgDE,OAAlF;;AACA,MAAMC,uBAAuB,GAAGH,OAAO,CAAC,oCAAD,CAAP,CAA8CE,OAA9E;;AAEA,MAAME,sBAAsB,GAAGJ,OAAO,CAAC,8BAAD,CAAtC;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMM,kBAAkB,GAAGN,OAAO,CAAC,0BAAD,CAAlC;;AACA,MAAMO,qBAAqB,GAAGP,OAAO,CAAC,6BAAD,CAArC;;AACA,MAAMQ,kBAAkB,GAAGR,OAAO,CAAC,0BAAD,CAAlC;;AACA,MAAMS,qBAAqB,GAAGT,OAAO,CAAC,6BAAD,CAArC;;AAEA,MAAM;AAAEU,EAAAA;AAAF,IAAUV,OAAO,CAAC,mBAAD,CAAvB;;AAEAW,MAAM,CAACC,OAAP,GAAiB,CAACC,YAAY,GAAG,EAAhB,KAAuB;AACtC,SAAO,CACLH,GAAG,CAACI,KAAJ,IACE,UAAUC,IAAV,EAAgB;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,WAAb;AACA,WAAOH,IAAP;AACD,GANE,EAOL,UAAUA,IAAV,EAAgBI,MAAhB,EAAwB;AACtB,aAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,IAAI,GAAG,YAA7C,EAA2D;AACzDH,MAAAA,MAAM,CAACI,QAAP,CAAgBC,IAAhB,CAAqB;AACnBF,QAAAA,IADmB;AAEnBG,QAAAA,MAAM,EAAE,iBAFW;AAGnBC,QAAAA,MAAM,EAAEP,MAAM,CAACQ,IAAP,CAAYC,IAHD;AAInBC,QAAAA,IAAI,EAAER;AAJa,OAArB;AAMD;;AAEDjB,IAAAA,sBAAsB,CAACW,IAAD,CAAtB;AAEA,QAAIe,OAAO,GAAGzB,YAAY,CAACQ,YAAD,CAAZ,CAA2BM,MAA3B,EAAmCJ,IAAnC,CAAd;;AAEA,QAAI,CAACL,GAAG,CAACqB,sBAAT,EAAiC;AAC/B,UAAID,OAAO,CAACE,UAAR,KAAuB,IAA3B,EAAiC;AAC/BZ,QAAAA,kBAAkB,CAACU,OAAO,CAACE,UAAT,CAAlB;AACD;AACF;;AAED,WAAOjC,OAAO,CAAC,CACbO,kBAAkB,CAACwB,OAAD,CADL,EAEbvB,qBAAqB,CAACuB,OAAD,EAAUV,kBAAV,CAFR,EAGbZ,kBAAkB,CAACsB,OAAD,CAHL,EAIb7B,yBAAyB,CAAC6B,OAAO,CAACG,cAAT,CAJZ,EAKb9B,uBAAuB,CAAC2B,OAAO,CAACG,cAAT,CALV,EAMbxB,qBAAqB,CAACqB,OAAD,CANR,CAAD,CAAP,CAOJI,OAPI,CAOInB,IAPJ,EAOU;AAAEa,MAAAA,IAAI,EAAEO;AAAR,KAPV,CAAP;AAQD,GAnCI,EAoCLzB,GAAG,CAACI,KAAJ,IACE,UAAUC,IAAV,EAAgB;AACdC,IAAAA,OAAO,CAACoB,OAAR,CAAgB,WAAhB;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAOF,IAAP;AACD,GAzCE,EA0CLsB,MA1CK,CA0CEC,OA1CF,CAAP;AA2CD,CA5CD;;AA8CA3B,MAAM,CAACC,OAAP,CAAeb,OAAf,GAAyB,IAAzB","sourcesContent":["const postcss = require('postcss')\n\nconst evaluateTailwindFunctions = require('../lib/lib/evaluateTailwindFunctions').default\nconst substituteScreenAtRules = require('../lib/lib/substituteScreenAtRules').default\n\nconst rewriteTailwindImports = require('./lib/rewriteTailwindImports')\nconst setupContext = require('./lib/setupContext')\nconst removeLayerAtRules = require('./lib/removeLayerAtRules')\nconst expandTailwindAtRules = require('./lib/expandTailwindAtRules')\nconst expandApplyAtRules = require('./lib/expandApplyAtRules')\nconst collapseAdjacentRules = require('./lib/collapseAdjacentRules')\n\nconst { env } = require('./lib/sharedState')\n\nmodule.exports = (configOrPath = {}) => {\n  return [\n    env.DEBUG &&\n      function (root) {\n        console.log('\\n')\n        console.time('JIT TOTAL')\n        return root\n      },\n    function (root, result) {\n      function registerDependency(fileName, type = 'dependency') {\n        result.messages.push({\n          type,\n          plugin: 'tailwindcss-jit',\n          parent: result.opts.from,\n          file: fileName,\n        })\n      }\n\n      rewriteTailwindImports(root)\n\n      let context = setupContext(configOrPath)(result, root)\n\n      if (!env.TAILWIND_DISABLE_TOUCH) {\n        if (context.configPath !== null) {\n          registerDependency(context.configPath)\n        }\n      }\n\n      return postcss([\n        removeLayerAtRules(context),\n        expandTailwindAtRules(context, registerDependency),\n        expandApplyAtRules(context),\n        evaluateTailwindFunctions(context.tailwindConfig),\n        substituteScreenAtRules(context.tailwindConfig),\n        collapseAdjacentRules(context),\n      ]).process(root, { from: undefined })\n    },\n    env.DEBUG &&\n      function (root) {\n        console.timeEnd('JIT TOTAL')\n        console.log('\\n')\n        return root\n      },\n  ].filter(Boolean)\n}\n\nmodule.exports.postcss = true\n"]},"metadata":{},"sourceType":"script"}