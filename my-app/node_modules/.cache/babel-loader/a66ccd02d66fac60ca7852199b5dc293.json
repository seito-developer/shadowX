{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tailwindExtractor = tailwindExtractor;\nexports.default = purgeUnusedUtilities;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssPurgecss = _interopRequireDefault(require(\"@fullhuman/postcss-purgecss\"));\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nvar _htmlTags = _interopRequireDefault(require(\"html-tags\"));\n\nvar _parseGlob = _interopRequireDefault(require(\"parse-glob\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction removeTailwindMarkers(css) {\n  css.walkAtRules('tailwind', rule => rule.remove());\n  css.walkComments(comment => {\n    switch (comment.text.trim()) {\n      case 'tailwind start base':\n      case 'tailwind end base':\n      case 'tailwind start components':\n      case 'tailwind start utilities':\n      case 'tailwind end components':\n      case 'tailwind end utilities':\n        comment.remove();\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nfunction tailwindExtractor(content) {\n  // Capture as liberally as possible, including things like `h-(screen-1.5)`\n  const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || [];\n  const broadMatchesWithoutTrailingSlash = broadMatches.map(match => _lodash.default.trimEnd(match, '\\\\')); // Capture classes within other delimiters like .block(class=\"w-1/2\") in Pug\n\n  const innerMatches = content.match(/[^<>\"'`\\s.(){}[\\]#=%]*[^<>\"'`\\s.(){}[\\]#=%:]/g) || [];\n  return broadMatches.concat(broadMatchesWithoutTrailingSlash).concat(innerMatches);\n}\n\nfunction purgeUnusedUtilities(config, configChanged, registerDependency) {\n  const purgeEnabled = _lodash.default.get(config, 'purge.enabled', config.purge !== false && config.purge !== undefined && process.env.NODE_ENV === 'production');\n\n  if (!purgeEnabled) {\n    return removeTailwindMarkers;\n  } // Skip if `purge: []` since that's part of the default config\n\n\n  if (Array.isArray(config.purge) && config.purge.length === 0) {\n    if (configChanged) {\n      _log.default.warn(['Tailwind is not purging unused styles because no template paths have been provided.', 'If you have manually configured PurgeCSS outside of Tailwind or are deliberately not removing unused styles, set `purge: false` in your Tailwind config file to silence this warning.', 'https://tailwindcss.com/docs/controlling-file-size/#removing-unused-css']);\n    }\n\n    return removeTailwindMarkers;\n  }\n\n  const {\n    defaultExtractor,\n    ...purgeOptions\n  } = config.purge.options || {};\n  let content = Array.isArray(config.purge) ? config.purge : config.purge.content;\n\n  for (let maybeGlob of content.filter(item => typeof item === 'string')) {\n    let {\n      is,\n      base\n    } = (0, _parseGlob.default)(maybeGlob);\n\n    if (is.glob) {\n      // rollup-plugin-postcss does not support dir-dependency messages\n      // but directories can be watched in the same way as files\n      registerDependency(_path.default.resolve(base), process.env.ROLLUP_WATCH === 'true' ? 'dependency' : 'dir-dependency');\n    } else {\n      registerDependency(_path.default.resolve(maybeGlob));\n    }\n  }\n\n  return (0, _postcss.default)([function (css) {\n    const mode = _lodash.default.get(config, 'purge.mode', 'layers');\n\n    if (!['all', 'layers'].includes(mode)) {\n      throw new Error('Purge `mode` must be one of `layers` or `all`.');\n    }\n\n    if (mode === 'all') {\n      return;\n    }\n\n    const layers = _lodash.default.get(config, 'purge.layers', ['base', 'components', 'utilities']);\n\n    css.walkComments(comment => {\n      switch (comment.text.trim()) {\n        case `purgecss start ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          break;\n\n        case `purgecss end ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          comment.text = 'purgecss start ignore';\n          break;\n\n        default:\n          break;\n      }\n\n      layers.forEach(layer => {\n        switch (comment.text.trim()) {\n          case `tailwind start ${layer}`:\n            comment.text = 'purgecss end ignore';\n            break;\n\n          case `tailwind end ${layer}`:\n            comment.text = 'purgecss start ignore';\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n    css.prepend(_postcss.default.comment({\n      text: 'purgecss start ignore'\n    }));\n    css.append(_postcss.default.comment({\n      text: 'purgecss end ignore'\n    }));\n  }, removeTailwindMarkers, (0, _postcssPurgecss.default)({\n    content,\n    defaultExtractor: content => {\n      const extractor = defaultExtractor || tailwindExtractor;\n      const preserved = [...extractor(content)];\n\n      if (_lodash.default.get(config, 'purge.preserveHtmlElements', true)) {\n        preserved.push(..._htmlTags.default);\n      }\n\n      return preserved;\n    },\n    ...purgeOptions\n  })]);\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/lib/purgeUnusedStyles.js"],"names":["Object","defineProperty","exports","value","tailwindExtractor","default","purgeUnusedUtilities","_lodash","_interopRequireDefault","require","_postcss","_postcssPurgecss","_log","_htmlTags","_parseGlob","_path","obj","__esModule","removeTailwindMarkers","css","walkAtRules","rule","remove","walkComments","comment","text","trim","content","broadMatches","match","broadMatchesWithoutTrailingSlash","map","trimEnd","innerMatches","concat","config","configChanged","registerDependency","purgeEnabled","get","purge","undefined","process","env","NODE_ENV","Array","isArray","length","warn","defaultExtractor","purgeOptions","options","maybeGlob","filter","item","is","base","glob","resolve","ROLLUP_WATCH","mode","includes","Error","layers","before","forEach","layer","prepend","append","extractor","preserved","push"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tailwindExtractor = tailwindExtractor;\nexports.default = purgeUnusedUtilities;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssPurgecss = _interopRequireDefault(require(\"@fullhuman/postcss-purgecss\"));\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nvar _htmlTags = _interopRequireDefault(require(\"html-tags\"));\n\nvar _parseGlob = _interopRequireDefault(require(\"parse-glob\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction removeTailwindMarkers(css) {\n  css.walkAtRules('tailwind', rule => rule.remove());\n  css.walkComments(comment => {\n    switch (comment.text.trim()) {\n      case 'tailwind start base':\n      case 'tailwind end base':\n      case 'tailwind start components':\n      case 'tailwind start utilities':\n      case 'tailwind end components':\n      case 'tailwind end utilities':\n        comment.remove();\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nfunction tailwindExtractor(content) {\n  // Capture as liberally as possible, including things like `h-(screen-1.5)`\n  const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || [];\n  const broadMatchesWithoutTrailingSlash = broadMatches.map(match => _lodash.default.trimEnd(match, '\\\\')); // Capture classes within other delimiters like .block(class=\"w-1/2\") in Pug\n\n  const innerMatches = content.match(/[^<>\"'`\\s.(){}[\\]#=%]*[^<>\"'`\\s.(){}[\\]#=%:]/g) || [];\n  return broadMatches.concat(broadMatchesWithoutTrailingSlash).concat(innerMatches);\n}\n\nfunction purgeUnusedUtilities(config, configChanged, registerDependency) {\n  const purgeEnabled = _lodash.default.get(config, 'purge.enabled', config.purge !== false && config.purge !== undefined && process.env.NODE_ENV === 'production');\n\n  if (!purgeEnabled) {\n    return removeTailwindMarkers;\n  } // Skip if `purge: []` since that's part of the default config\n\n\n  if (Array.isArray(config.purge) && config.purge.length === 0) {\n    if (configChanged) {\n      _log.default.warn(['Tailwind is not purging unused styles because no template paths have been provided.', 'If you have manually configured PurgeCSS outside of Tailwind or are deliberately not removing unused styles, set `purge: false` in your Tailwind config file to silence this warning.', 'https://tailwindcss.com/docs/controlling-file-size/#removing-unused-css']);\n    }\n\n    return removeTailwindMarkers;\n  }\n\n  const {\n    defaultExtractor,\n    ...purgeOptions\n  } = config.purge.options || {};\n  let content = Array.isArray(config.purge) ? config.purge : config.purge.content;\n\n  for (let maybeGlob of content.filter(item => typeof item === 'string')) {\n    let {\n      is,\n      base\n    } = (0, _parseGlob.default)(maybeGlob);\n\n    if (is.glob) {\n      // rollup-plugin-postcss does not support dir-dependency messages\n      // but directories can be watched in the same way as files\n      registerDependency(_path.default.resolve(base), process.env.ROLLUP_WATCH === 'true' ? 'dependency' : 'dir-dependency');\n    } else {\n      registerDependency(_path.default.resolve(maybeGlob));\n    }\n  }\n\n  return (0, _postcss.default)([function (css) {\n    const mode = _lodash.default.get(config, 'purge.mode', 'layers');\n\n    if (!['all', 'layers'].includes(mode)) {\n      throw new Error('Purge `mode` must be one of `layers` or `all`.');\n    }\n\n    if (mode === 'all') {\n      return;\n    }\n\n    const layers = _lodash.default.get(config, 'purge.layers', ['base', 'components', 'utilities']);\n\n    css.walkComments(comment => {\n      switch (comment.text.trim()) {\n        case `purgecss start ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          break;\n\n        case `purgecss end ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          comment.text = 'purgecss start ignore';\n          break;\n\n        default:\n          break;\n      }\n\n      layers.forEach(layer => {\n        switch (comment.text.trim()) {\n          case `tailwind start ${layer}`:\n            comment.text = 'purgecss end ignore';\n            break;\n\n          case `tailwind end ${layer}`:\n            comment.text = 'purgecss start ignore';\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n    css.prepend(_postcss.default.comment({\n      text: 'purgecss start ignore'\n    }));\n    css.append(_postcss.default.comment({\n      text: 'purgecss end ignore'\n    }));\n  }, removeTailwindMarkers, (0, _postcssPurgecss.default)({\n    content,\n    defaultExtractor: content => {\n      const extractor = defaultExtractor || tailwindExtractor;\n      const preserved = [...extractor(content)];\n\n      if (_lodash.default.get(config, 'purge.preserveHtmlElements', true)) {\n        preserved.push(..._htmlTags.default);\n      }\n\n      return preserved;\n    },\n    ...purgeOptions\n  })]);\n}"]},"metadata":{},"sourceType":"script"}