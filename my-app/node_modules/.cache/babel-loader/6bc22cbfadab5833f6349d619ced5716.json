{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = applyImportantConfiguration;\n\nfunction applyImportantConfiguration(_config) {\n  return function (css) {\n    css.walkRules(rule => {\n      const important = rule.__tailwind ? rule.__tailwind.important : false;\n\n      if (!important) {\n        return;\n      }\n\n      if (typeof important === 'string') {\n        rule.selectors = rule.selectors.map(selector => {\n          return `${rule.__tailwind.important} ${selector}`;\n        });\n      } else {\n        rule.walkDecls(decl => decl.important = true);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/lib/applyImportantConfiguration.js"],"names":["Object","defineProperty","exports","value","default","applyImportantConfiguration","_config","css","walkRules","rule","important","__tailwind","selectors","map","selector","walkDecls","decl"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,2BAAlB;;AAEA,SAASA,2BAAT,CAAqCC,OAArC,EAA8C;AAC5C,SAAO,UAAUC,GAAV,EAAe;AACpBA,IAAAA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAI;AACpB,YAAMC,SAAS,GAAGD,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACE,UAAL,CAAgBD,SAAlC,GAA8C,KAAhE;;AAEA,UAAI,CAACA,SAAL,EAAgB;AACd;AACD;;AAED,UAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjCD,QAAAA,IAAI,CAACG,SAAL,GAAiBH,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmBC,QAAQ,IAAI;AAC9C,iBAAQ,GAAEL,IAAI,CAACE,UAAL,CAAgBD,SAAU,IAAGI,QAAS,EAAhD;AACD,SAFgB,CAAjB;AAGD,OAJD,MAIO;AACLL,QAAAA,IAAI,CAACM,SAAL,CAAeC,IAAI,IAAIA,IAAI,CAACN,SAAL,GAAiB,IAAxC;AACD;AACF,KAdD;AAeD,GAhBD;AAiBD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = applyImportantConfiguration;\n\nfunction applyImportantConfiguration(_config) {\n  return function (css) {\n    css.walkRules(rule => {\n      const important = rule.__tailwind ? rule.__tailwind.important : false;\n\n      if (!important) {\n        return;\n      }\n\n      if (typeof important === 'string') {\n        rule.selectors = rule.selectors.map(selector => {\n          return `${rule.__tailwind.important} ${selector}`;\n        });\n      } else {\n        rule.walkDecls(decl => decl.important = true);\n      }\n    });\n  };\n}"]},"metadata":{},"sourceType":"script"}