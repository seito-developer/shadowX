{"ast":null,"code":"const flattenColorPalette = require('../../lib/util/flattenColorPalette').default;\n\nconst toColorValue = require('../../lib/util/toColorValue').default;\n\nconst {\n  asColor,\n  nameClass\n} = require('../pluginUtils');\n\nmodule.exports = function ({\n  matchUtilities,\n  theme\n}) {\n  let colorPalette = flattenColorPalette(theme('fill'));\n  matchUtilities({\n    fill: modifier => {\n      let value = asColor(modifier, colorPalette);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('fill', modifier)]: {\n          fill: toColorValue(value)\n        }\n      };\n    }\n  });\n};","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/jit/corePlugins/fill.js"],"names":["flattenColorPalette","require","default","toColorValue","asColor","nameClass","module","exports","matchUtilities","theme","colorPalette","fill","modifier","value","undefined"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,oCAAD,CAAP,CAA8CC,OAA1E;;AACA,MAAMC,YAAY,GAAGF,OAAO,CAAC,6BAAD,CAAP,CAAuCC,OAA5D;;AACA,MAAM;AAAEE,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAyBJ,OAAO,CAAC,gBAAD,CAAtC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAV,EAAqC;AACpD,MAAIC,YAAY,GAAGV,mBAAmB,CAACS,KAAK,CAAC,MAAD,CAAN,CAAtC;AAEAD,EAAAA,cAAc,CAAC;AACbG,IAAAA,IAAI,EAAGC,QAAD,IAAc;AAClB,UAAIC,KAAK,GAAGT,OAAO,CAACQ,QAAD,EAAWF,YAAX,CAAnB;;AAEA,UAAIG,KAAK,KAAKC,SAAd,EAAyB;AACvB,eAAO,EAAP;AACD;;AAED,aAAO;AAAE,SAACT,SAAS,CAAC,MAAD,EAASO,QAAT,CAAV,GAA+B;AAAED,UAAAA,IAAI,EAAER,YAAY,CAACU,KAAD;AAApB;AAAjC,OAAP;AACD;AATY,GAAD,CAAd;AAWD,CAdD","sourcesContent":["const flattenColorPalette = require('../../lib/util/flattenColorPalette').default\nconst toColorValue = require('../../lib/util/toColorValue').default\nconst { asColor, nameClass } = require('../pluginUtils')\n\nmodule.exports = function ({ matchUtilities, theme }) {\n  let colorPalette = flattenColorPalette(theme('fill'))\n\n  matchUtilities({\n    fill: (modifier) => {\n      let value = asColor(modifier, colorPalette)\n\n      if (value === undefined) {\n        return []\n      }\n\n      return { [nameClass('fill', modifier)]: { fill: toColorValue(value) } }\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"script"}