{"ast":null,"code":"const {\n  asValue,\n  nameClass\n} = require('../pluginUtils');\n\nmodule.exports = function ({\n  matchUtilities\n}) {\n  matchUtilities({\n    inset: (modifier, {\n      theme\n    }) => {\n      let value = asValue(modifier, theme['inset']);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('inset', modifier)]: {\n          top: value,\n          right: value,\n          bottom: value,\n          left: value\n        }\n      };\n    }\n  });\n  matchUtilities({\n    'inset-x': (modifier, {\n      theme\n    }) => {\n      let value = asValue(modifier, theme['inset']);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('inset-x', modifier)]: {\n          left: value,\n          right: value\n        }\n      };\n    },\n    'inset-y': (modifier, {\n      theme\n    }) => {\n      let value = asValue(modifier, theme['inset']);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('inset-y', modifier)]: {\n          top: value,\n          bottom: value\n        }\n      };\n    }\n  });\n  matchUtilities({\n    top: (modifier, {\n      theme\n    }) => {\n      let value = asValue(modifier, theme['inset']);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('top', modifier)]: {\n          top: value\n        }\n      };\n    },\n    right: (modifier, {\n      theme\n    }) => {\n      let value = asValue(modifier, theme['inset']);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('right', modifier)]: {\n          right: value\n        }\n      };\n    },\n    bottom: (modifier, {\n      theme\n    }) => {\n      let value = asValue(modifier, theme['inset']);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('bottom', modifier)]: {\n          bottom: value\n        }\n      };\n    },\n    left: (modifier, {\n      theme\n    }) => {\n      let value = asValue(modifier, theme['inset']);\n\n      if (value === undefined) {\n        return [];\n      }\n\n      return {\n        [nameClass('left', modifier)]: {\n          left: value\n        }\n      };\n    }\n  });\n};","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/jit/corePlugins/inset.js"],"names":["asValue","nameClass","require","module","exports","matchUtilities","inset","modifier","theme","value","undefined","top","right","bottom","left"],"mappings":"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","sourcesContent":["const { asValue, nameClass } = require('../pluginUtils')\n\nmodule.exports = function ({ matchUtilities }) {\n  matchUtilities({\n    inset: (modifier, { theme }) => {\n      let value = asValue(modifier, theme['inset'])\n\n      if (value === undefined) {\n        return []\n      }\n\n      return {\n        [nameClass('inset', modifier)]: { top: value, right: value, bottom: value, left: value },\n      }\n    },\n  })\n  matchUtilities({\n    'inset-x': (modifier, { theme }) => {\n      let value = asValue(modifier, theme['inset'])\n\n      if (value === undefined) {\n        return []\n      }\n\n      return { [nameClass('inset-x', modifier)]: { left: value, right: value } }\n    },\n    'inset-y': (modifier, { theme }) => {\n      let value = asValue(modifier, theme['inset'])\n\n      if (value === undefined) {\n        return []\n      }\n\n      return { [nameClass('inset-y', modifier)]: { top: value, bottom: value } }\n    },\n  })\n  matchUtilities({\n    top: (modifier, { theme }) => {\n      let value = asValue(modifier, theme['inset'])\n\n      if (value === undefined) {\n        return []\n      }\n\n      return { [nameClass('top', modifier)]: { top: value } }\n    },\n    right: (modifier, { theme }) => {\n      let value = asValue(modifier, theme['inset'])\n\n      if (value === undefined) {\n        return []\n      }\n\n      return { [nameClass('right', modifier)]: { right: value } }\n    },\n    bottom: (modifier, { theme }) => {\n      let value = asValue(modifier, theme['inset'])\n\n      if (value === undefined) {\n        return []\n      }\n\n      return { [nameClass('bottom', modifier)]: { bottom: value } }\n    },\n    left: (modifier, { theme }) => {\n      let value = asValue(modifier, theme['inset'])\n\n      if (value === undefined) {\n        return []\n      }\n\n      return { [nameClass('left', modifier)]: { left: value } }\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"script"}