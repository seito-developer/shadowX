{"ast":null,"code":"'use strict';\n/**\n *   Copyright 2013 Vimeo\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\nvar qsModule = require('querystring');\n\nvar urlModule = require('url');\n\nvar httpModule = require('http');\n\nvar httpsModule = require('https');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar tus = require('tus-js-client');\n\nmodule.exports.request_defaults = {\n  protocol: 'https:',\n  hostname: 'api.vimeo.com',\n  port: 443,\n  method: 'GET',\n  query: {},\n  headers: {\n    Accept: 'application/vnd.vimeo.*+json;version=3.4',\n    'User-Agent': 'Vimeo.js/2.1.1'\n  }\n};\nvar authEndpoints = module.exports.authEndpoints = {\n  authorization: '/oauth/authorize',\n  accessToken: '/oauth/access_token',\n  clientCredentials: '/oauth/authorize/client'\n};\n/**\n * This object is used to interface with the Vimeo API.\n *\n * @param {string} clientId     OAuth 2 Client Identifier\n * @param {string} clientSecret OAuth 2 Client Secret\n * @param {string} accessToken  OAuth 2 Optional pre-authorized access token\n */\n\nvar Vimeo = module.exports.Vimeo = function Vimeo(clientId, clientSecret, accessToken) {\n  this._clientId = clientId;\n  this._clientSecret = clientSecret;\n\n  if (accessToken) {\n    this._accessToken = accessToken;\n  }\n};\n\nVimeo.prototype._clientId = null;\nVimeo.prototype._clientSecret = null;\nVimeo.prototype._accessToken = null;\n/**\n * Performs an API call.\n *\n * Can be called one of two ways:\n *\n * 1. Url + Callback\n *    If a url is provided, we fill in the rest of the request options with defaults\n *    (GET http://api.vimeo.com/{url}).\n *\n * 2. Options + callback\n *    If an object is provided, it should match the response of urlModule.parse. Path is the only\n *    required parameter.\n *\n *    - hostname\n *    - port\n *    - query (will be applied to the url if GET, request body if POST)\n *    - headers\n *    - path (can include a querystring)\n *    - method\n *\n * The callback takes two parameters, `err` and `json`.\n * If an error has occured, your callback will be called as `callback(err)`;\n * If an error has not occured, your callback will be called as `callback(null, json)`;\n *\n * @param {string|Object} options   String path (default GET), or object with `method`, path`,\n *                                  `host`, `port`, `query` or `headers`.\n * @param {Function}      callback  Called when complete, `function (err, json)`.\n */\n\nVimeo.prototype.request = function (options, callback) {\n  var client = null; // If a URL was provided, build an options object.\n\n  if (typeof options === 'string') {\n    options = urlModule.parse(options, true);\n    options.method = 'GET';\n  } // If we don't have a path at this point, error. a path is the only required field. We have\n  // defaults for everything else important.\n\n\n  if (typeof options.path !== 'string') {\n    return callback(new Error('You must provide an API path.'));\n  } // Add leading slash to path if missing\n\n\n  if (options.path.charAt(0) !== '/') {\n    options.path = '/' + options.path;\n  } // Turn the provided options into options that are valid for `client.request`.\n\n\n  var requestOptions = this._buildRequestOptions(options);\n\n  client = requestOptions.protocol === 'https:' ? httpsModule : httpModule;\n\n  if (['POST', 'PATCH', 'PUT', 'DELETE'].indexOf(requestOptions.method) !== -1) {\n    if (requestOptions.headers['Content-Type'] === 'application/json') {\n      requestOptions.body = JSON.stringify(options.query);\n    } else {\n      requestOptions.body = qsModule.stringify(options.query);\n    }\n\n    if (requestOptions.body) {\n      requestOptions.headers['Content-Length'] = Buffer.byteLength(requestOptions.body, 'utf8');\n    } else {\n      requestOptions.headers['Content-Length'] = 0;\n    }\n  } // Perform the Vimeo API request\n\n\n  var req = client.request(requestOptions, this._handleRequest(callback));\n\n  if (requestOptions.body) {\n    req.write(requestOptions.body);\n  }\n\n  req.on('error', function (e) {\n    callback(e);\n  });\n  req.end();\n};\n/**\n * Creates the standard request handler for http requests\n *\n * @param  {Function} callback\n * @return {Function}\n */\n\n\nVimeo.prototype._handleRequest = function (callback) {\n  return function (res) {\n    res.setEncoding('utf8');\n    var buffer = '';\n    res.on('readable', function () {\n      buffer += res.read() || '';\n    });\n\n    if (res.statusCode >= 400) {\n      // Failed api calls should wait for the response to end and then call the callback with an\n      // error.\n      res.on('end', function () {\n        var err = new Error(buffer);\n        callback(err, buffer, res.statusCode, res.headers);\n      });\n    } else {\n      // Successful api calls should wait for the response to end and then call the callback with\n      // the response body.\n      res.on('end', function () {\n        try {\n          var body = buffer.length ? JSON.parse(buffer) : {};\n        } catch (e) {\n          return callback(buffer, buffer, res.statusCode, res.headers);\n        }\n\n        callback(null, body, res.statusCode, res.headers);\n      });\n    }\n  };\n};\n/**\n * Merge the request options defaults into the request options\n *\n * @param  {Object} options\n * @return {Object}\n */\n\n\nVimeo.prototype._buildRequestOptions = function (options) {\n  // Set up the request object. we always use the options paramter first, and if no value is\n  // provided we fall back to request defaults.\n  var requestOptions = this._applyDefaultRequestOptions(options);\n\n  if (this._accessToken) {\n    requestOptions.headers.Authorization = 'Bearer ' + this._accessToken;\n  } else if (this._clientId && this._clientSecret) {\n    var basicToken = Buffer.from(this._clientId + ':' + this._clientSecret);\n    requestOptions.headers.Authorization = 'Basic ' + basicToken.toString('base64');\n  }\n\n  if (['POST', 'PATCH', 'PUT', 'DELETE'].indexOf(requestOptions.method) !== -1 && !requestOptions.headers['Content-Type']) {\n    // Set proper headers for POST, PATCH and PUT bodies.\n    requestOptions.headers['Content-Type'] = 'application/json';\n  } else if (requestOptions.method === 'GET') {\n    // Apply parameters to the URL for GET requests.\n    requestOptions.path = this._applyQuerystringParams(requestOptions, options);\n  }\n\n  return requestOptions;\n};\n/**\n * Create an object of request options based on the provided list of options, and the request\n * defaults.\n *\n * @param  {Object} options\n * @return {Object}\n */\n\n\nVimeo.prototype._applyDefaultRequestOptions = function (options) {\n  var requestOptions = {\n    protocol: options.protocol || module.exports.request_defaults.protocol,\n    host: options.hostname || module.exports.request_defaults.hostname,\n    port: options.port || module.exports.request_defaults.port,\n    method: options.method || module.exports.request_defaults.method,\n    headers: options.headers || {},\n    body: '',\n    path: options.path\n  };\n  var key = null; // Apply the default headers\n\n  if (module.exports.request_defaults.headers) {\n    for (key in module.exports.request_defaults.headers) {\n      if (!requestOptions.headers[key]) {\n        requestOptions.headers[key] = module.exports.request_defaults.headers[key];\n      }\n    }\n  }\n\n  return requestOptions;\n};\n/**\n * Apply the query parameter onto the final request URL.\n *\n * @param  {Object} requestOptions\n * @param  {Object} options\n * @return {string}\n */\n\n\nVimeo.prototype._applyQuerystringParams = function (requestOptions, options) {\n  var querystring = '';\n\n  if (!options.query) {\n    return requestOptions.path;\n  } // If we have parameters, apply them to the URL.\n\n\n  if (Object.keys(options.query).length) {\n    if (requestOptions.path.indexOf('?') < 0) {\n      // If the existing path does not contain any parameters, apply them as the only options.\n      querystring = '?' + qsModule.stringify(options.query);\n    } else {\n      // If the user already added parameters to the URL, we want to add them as additional\n      // parameters.\n      querystring = '&' + qsModule.stringify(options.query);\n    }\n  }\n\n  return requestOptions.path + querystring;\n};\n/**\n * Set a user access token to be used with library requests.\n *\n * @param {string} accessToken\n */\n\n\nVimeo.prototype.setAccessToken = function (accessToken) {\n  this._accessToken = accessToken;\n};\n/**\n * Exchange a code for an access token. This code should exist on your `redirectUri`.\n *\n * @param {string}   code         The code provided on your `redirectUri`.\n * @param {string}   redirectUri  The exact `redirectUri` provided to `buildAuthorizationEndpoint`\n *                                and configured in your API app settings.\n * @param {Function} fn           Callback to execute on completion.\n */\n\n\nVimeo.prototype.accessToken = function (code, redirectUri, fn) {\n  var options = {\n    method: 'POST',\n    hostname: module.exports.request_defaults.hostname,\n    path: authEndpoints.accessToken,\n    query: {\n      grant_type: 'authorization_code',\n      code: code,\n      redirect_uri: redirectUri\n    },\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n  this.request(options, function (err, body, status, headers) {\n    if (err) {\n      return fn(err, null, status, headers);\n    } else {\n      fn(null, body, status, headers);\n    }\n  });\n};\n/**\n * The first step of the authorization process.\n *\n * This function returns a URL, which the user should be sent to (via redirect or link).\n *\n * The destination allows the user to accept or deny connecting with vimeo, and accept or deny each\n * of the scopes you requested. Scopes are passed through the second parameter as an array of\n * strings, or a space delimited list.\n *\n * Once accepted or denied, the user is redirected back to the `redirectUri`.\n *\n * @param  {string} redirectUri   The URI that will exchange a code for an access token. Must match\n *                                the URI in your API app settings.\n * @param  {string} scope         An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n *                                for more.\n * @param  {string} state         A unique state that will be returned to you on your redirect URI.\n */\n\n\nVimeo.prototype.buildAuthorizationEndpoint = function (redirectUri, scope, state) {\n  var query = {\n    response_type: 'code',\n    client_id: this._clientId,\n    redirect_uri: redirectUri\n  };\n\n  if (scope) {\n    if (Array.isArray(scope)) {\n      query.scope = scope.join(' ');\n    } else {\n      query.scope = scope;\n    }\n  } else {\n    query.scope = 'public';\n  }\n\n  if (state) {\n    query.state = state;\n  }\n\n  return module.exports.request_defaults.protocol + '//' + module.exports.request_defaults.hostname + authEndpoints.authorization + '?' + qsModule.stringify(query);\n};\n/**\n * Generates an unauthenticated access token. This is necessary to make unauthenticated requests\n *\n * @param  {string}   scope An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n *                          for more.\n * @param  {Function} fn    A function that is called when the request is complete. If an error\n *                          occured the first parameter will be that error, otherwise the first\n *                          parameter will be null.\n */\n\n\nVimeo.prototype.generateClientCredentials = function (scope, fn) {\n  var query = {\n    grant_type: 'client_credentials'\n  };\n\n  if (scope) {\n    if (Array.isArray(scope)) {\n      query.scope = scope.join(' ');\n    } else {\n      query.scope = scope;\n    }\n  } else {\n    query.scope = 'public';\n  }\n\n  this.request({\n    method: 'POST',\n    hostname: module.exports.request_defaults.hostname,\n    path: authEndpoints.clientCredentials,\n    query: query,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }, function (err, body, status, headers) {\n    if (err) {\n      return fn(err, null, status, headers);\n    } else {\n      fn(null, body, status, headers);\n    }\n  });\n};\n/**\n * Upload a file.\n *\n * This should be used to upload a local file. If you want a form for your site to upload direct to\n * Vimeo, you should look at the `POST /me/videos` endpoint.\n *\n * https://developer.vimeo.com/api/endpoints/videos#POST/users/{user_id}/videos\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {object=}   params            Parameters to send when creating a new video (name,\n *                                      privacy restrictions, etc.). See the API documentation for\n *                                      supported parameters.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\n\n\nVimeo.prototype.upload = function (file, params, completeCallback, progressCallback, errorCallback) {\n  var _self = this;\n\n  var fileSize;\n\n  if (typeof params === 'function') {\n    errorCallback = progressCallback;\n    progressCallback = completeCallback;\n    completeCallback = params;\n    params = {};\n  }\n\n  if (typeof file === 'string') {\n    try {\n      fileSize = fs.statSync(file).size;\n    } catch (e) {\n      return errorCallback('Unable to locate file to upload.');\n    }\n  } else {\n    fileSize = file.size;\n  } // Ignore any specified upload approach and size.\n\n\n  if (typeof params.upload === 'undefined') {\n    params.upload = {\n      'approach': 'tus',\n      'size': fileSize\n    };\n  } else {\n    params.upload.approach = 'tus';\n    params.upload.size = fileSize;\n  }\n\n  var options = {\n    path: '/me/videos?fields=uri,name,upload',\n    method: 'POST',\n    query: params\n  }; // Use JSON filtering so we only receive the data that we need to make an upload happen.\n\n  this.request(options, function (err, attempt, status) {\n    if (err) {\n      return errorCallback('Unable to initiate an upload. [' + err + ']');\n    }\n\n    _self._performTusUpload(file, fileSize, attempt, completeCallback, progressCallback, errorCallback);\n  });\n};\n/**\n * Replace the source of a single Vimeo video.\n *\n * https://developer.vimeo.com/api/endpoints/videos#POST/videos/{video_id}/versions\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {string}    videoUri          Video URI of the video file to replace.\n * @param {object=}   params            Parameters to send when creating a new video (name,\n *                                      privacy restrictions, etc.). See the API documentation for\n *                                      supported parameters.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\n\n\nVimeo.prototype.replace = function (file, videoUri, params, completeCallback, progressCallback, errorCallback) {\n  var _self = this;\n\n  var fileSize;\n\n  if (typeof params === 'function') {\n    errorCallback = progressCallback;\n    progressCallback = completeCallback;\n    completeCallback = params;\n    params = {};\n  }\n\n  if (typeof file === 'string') {\n    try {\n      fileSize = fs.statSync(file).size;\n    } catch (e) {\n      return errorCallback('Unable to locate file to upload.');\n    }\n\n    params.file_name = path.basename(file);\n  } else {\n    fileSize = file.size;\n    params.file_name = file.name;\n  } // Ignore any specified upload approach and size.\n\n\n  if (typeof params.upload === 'undefined') {\n    params.upload = {\n      'approach': 'tus',\n      'size': fileSize\n    };\n  } else {\n    params.upload.approach = 'tus';\n    params.upload.size = fileSize;\n  }\n\n  var options = {\n    path: videoUri + '/versions?fields=upload',\n    method: 'POST',\n    query: params\n  }; // Use JSON filtering so we only receive the data that we need to make an upload happen.\n\n  _self.request(options, function (err, attempt, status) {\n    if (err) {\n      return errorCallback('Unable to initiate an upload. [' + err + ']');\n    }\n\n    attempt.uri = videoUri;\n\n    _self._performTusUpload(file, fileSize, attempt, completeCallback, progressCallback, errorCallback);\n  });\n};\n/**\n * Take an upload attempt and perform the actual upload via tus.\n *\n * https://tus.io/\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {integer}   fileSize          Size of the file that will be uploaded.\n * @param {Object}    attempt           Upload attempt data.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when the upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\n\n\nVimeo.prototype._performTusUpload = function (file, fileSize, attempt, completeCallback, progressCallback, errorCallback) {\n  var fileUpload = file;\n\n  if (typeof file === 'string') {\n    fileUpload = fs.createReadStream(file);\n  }\n\n  var upload = new tus.Upload(fileUpload, {\n    endpoint: 'none',\n    uploadSize: fileSize,\n    retryDelays: [0, 1000, 3000, 5000],\n    onError: errorCallback,\n    onProgress: progressCallback,\n    onSuccess: function () {\n      return completeCallback(attempt.uri);\n    }\n  });\n  upload.url = attempt.upload.upload_link;\n  upload.start();\n};","map":{"version":3,"sources":["/Users/seito/Documents/develop/shadowX/node_modules/vimeo/lib/vimeo.js"],"names":["qsModule","require","urlModule","httpModule","httpsModule","fs","path","tus","module","exports","request_defaults","protocol","hostname","port","method","query","headers","Accept","authEndpoints","authorization","accessToken","clientCredentials","Vimeo","clientId","clientSecret","_clientId","_clientSecret","_accessToken","prototype","request","options","callback","client","parse","Error","charAt","requestOptions","_buildRequestOptions","indexOf","body","JSON","stringify","Buffer","byteLength","req","_handleRequest","write","on","e","end","res","setEncoding","buffer","read","statusCode","err","length","_applyDefaultRequestOptions","Authorization","basicToken","from","toString","_applyQuerystringParams","host","key","querystring","Object","keys","setAccessToken","code","redirectUri","fn","grant_type","redirect_uri","status","buildAuthorizationEndpoint","scope","state","response_type","client_id","Array","isArray","join","generateClientCredentials","upload","file","params","completeCallback","progressCallback","errorCallback","_self","fileSize","statSync","size","approach","attempt","_performTusUpload","replace","videoUri","file_name","basename","name","uri","fileUpload","createReadStream","Upload","endpoint","uploadSize","retryDelays","onError","onProgress","onSuccess","url","upload_link","start"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n *   Copyright 2013 Vimeo\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\nvar qsModule = require('querystring')\nvar urlModule = require('url')\nvar httpModule = require('http')\nvar httpsModule = require('https')\nvar fs = require('fs')\nvar path = require('path')\nvar tus = require('tus-js-client')\n\nmodule.exports.request_defaults = {\n  protocol: 'https:',\n  hostname: 'api.vimeo.com',\n  port: 443,\n  method: 'GET',\n  query: {},\n  headers: {\n    Accept: 'application/vnd.vimeo.*+json;version=3.4',\n    'User-Agent': 'Vimeo.js/2.1.1'\n  }\n}\n\nvar authEndpoints = module.exports.authEndpoints = {\n  authorization: '/oauth/authorize',\n  accessToken: '/oauth/access_token',\n  clientCredentials: '/oauth/authorize/client'\n}\n\n/**\n * This object is used to interface with the Vimeo API.\n *\n * @param {string} clientId     OAuth 2 Client Identifier\n * @param {string} clientSecret OAuth 2 Client Secret\n * @param {string} accessToken  OAuth 2 Optional pre-authorized access token\n */\nvar Vimeo = module.exports.Vimeo = function Vimeo (clientId, clientSecret, accessToken) {\n  this._clientId = clientId\n  this._clientSecret = clientSecret\n\n  if (accessToken) {\n    this._accessToken = accessToken\n  }\n}\n\nVimeo.prototype._clientId = null\nVimeo.prototype._clientSecret = null\nVimeo.prototype._accessToken = null\n\n/**\n * Performs an API call.\n *\n * Can be called one of two ways:\n *\n * 1. Url + Callback\n *    If a url is provided, we fill in the rest of the request options with defaults\n *    (GET http://api.vimeo.com/{url}).\n *\n * 2. Options + callback\n *    If an object is provided, it should match the response of urlModule.parse. Path is the only\n *    required parameter.\n *\n *    - hostname\n *    - port\n *    - query (will be applied to the url if GET, request body if POST)\n *    - headers\n *    - path (can include a querystring)\n *    - method\n *\n * The callback takes two parameters, `err` and `json`.\n * If an error has occured, your callback will be called as `callback(err)`;\n * If an error has not occured, your callback will be called as `callback(null, json)`;\n *\n * @param {string|Object} options   String path (default GET), or object with `method`, path`,\n *                                  `host`, `port`, `query` or `headers`.\n * @param {Function}      callback  Called when complete, `function (err, json)`.\n */\nVimeo.prototype.request = function (options, callback) {\n  var client = null\n\n  // If a URL was provided, build an options object.\n  if (typeof options === 'string') {\n    options = urlModule.parse(options, true)\n    options.method = 'GET'\n  }\n\n  // If we don't have a path at this point, error. a path is the only required field. We have\n  // defaults for everything else important.\n  if (typeof options.path !== 'string') {\n    return callback(new Error('You must provide an API path.'))\n  }\n\n  // Add leading slash to path if missing\n  if (options.path.charAt(0) !== '/') {\n    options.path = '/' + options.path\n  }\n\n  // Turn the provided options into options that are valid for `client.request`.\n  var requestOptions = this._buildRequestOptions(options)\n\n  client = requestOptions.protocol === 'https:' ? httpsModule : httpModule\n\n  if (['POST', 'PATCH', 'PUT', 'DELETE'].indexOf(requestOptions.method) !== -1) {\n    if (requestOptions.headers['Content-Type'] === 'application/json') {\n      requestOptions.body = JSON.stringify(options.query)\n    } else {\n      requestOptions.body = qsModule.stringify(options.query)\n    }\n\n    if (requestOptions.body) {\n      requestOptions.headers['Content-Length'] = Buffer.byteLength(requestOptions.body, 'utf8')\n    } else {\n      requestOptions.headers['Content-Length'] = 0\n    }\n  }\n\n  // Perform the Vimeo API request\n  var req = client.request(requestOptions, this._handleRequest(callback))\n  if (requestOptions.body) {\n    req.write(requestOptions.body)\n  }\n\n  req.on('error', function (e) {\n    callback(e)\n  })\n\n  req.end()\n}\n\n/**\n * Creates the standard request handler for http requests\n *\n * @param  {Function} callback\n * @return {Function}\n */\nVimeo.prototype._handleRequest = function (callback) {\n  return function (res) {\n    res.setEncoding('utf8')\n\n    var buffer = ''\n\n    res.on('readable', function () {\n      buffer += res.read() || ''\n    })\n\n    if (res.statusCode >= 400) {\n      // Failed api calls should wait for the response to end and then call the callback with an\n      // error.\n      res.on('end', function () {\n        var err = new Error(buffer)\n        callback(err, buffer, res.statusCode, res.headers)\n      })\n    } else {\n      // Successful api calls should wait for the response to end and then call the callback with\n      // the response body.\n      res.on('end', function () {\n        try {\n          var body = buffer.length ? JSON.parse(buffer) : {}\n        } catch (e) {\n          return callback(buffer, buffer, res.statusCode, res.headers)\n        }\n\n        callback(null, body, res.statusCode, res.headers)\n      })\n    }\n  }\n}\n\n/**\n * Merge the request options defaults into the request options\n *\n * @param  {Object} options\n * @return {Object}\n */\nVimeo.prototype._buildRequestOptions = function (options) {\n  // Set up the request object. we always use the options paramter first, and if no value is\n  // provided we fall back to request defaults.\n  var requestOptions = this._applyDefaultRequestOptions(options)\n\n  if (this._accessToken) {\n    requestOptions.headers.Authorization = 'Bearer ' + this._accessToken\n  } else if (this._clientId && this._clientSecret) {\n    var basicToken = Buffer.from(this._clientId + ':' + this._clientSecret)\n    requestOptions.headers.Authorization = 'Basic ' + basicToken.toString('base64')\n  }\n\n  if (['POST', 'PATCH', 'PUT', 'DELETE'].indexOf(requestOptions.method) !== -1 &&\n    !requestOptions.headers['Content-Type']\n  ) {\n    // Set proper headers for POST, PATCH and PUT bodies.\n    requestOptions.headers['Content-Type'] = 'application/json'\n  } else if (requestOptions.method === 'GET') {\n    // Apply parameters to the URL for GET requests.\n    requestOptions.path = this._applyQuerystringParams(requestOptions, options)\n  }\n\n  return requestOptions\n}\n\n/**\n * Create an object of request options based on the provided list of options, and the request\n * defaults.\n *\n * @param  {Object} options\n * @return {Object}\n */\nVimeo.prototype._applyDefaultRequestOptions = function (options) {\n  var requestOptions = {\n    protocol: options.protocol || module.exports.request_defaults.protocol,\n    host: options.hostname || module.exports.request_defaults.hostname,\n    port: options.port || module.exports.request_defaults.port,\n    method: options.method || module.exports.request_defaults.method,\n    headers: options.headers || {},\n    body: '',\n    path: options.path\n  }\n\n  var key = null\n\n  // Apply the default headers\n  if (module.exports.request_defaults.headers) {\n    for (key in module.exports.request_defaults.headers) {\n      if (!requestOptions.headers[key]) {\n        requestOptions.headers[key] = module.exports.request_defaults.headers[key]\n      }\n    }\n  }\n\n  return requestOptions\n}\n\n/**\n * Apply the query parameter onto the final request URL.\n *\n * @param  {Object} requestOptions\n * @param  {Object} options\n * @return {string}\n */\nVimeo.prototype._applyQuerystringParams = function (requestOptions, options) {\n  var querystring = ''\n\n  if (!options.query) {\n    return requestOptions.path\n  }\n\n  // If we have parameters, apply them to the URL.\n  if (Object.keys(options.query).length) {\n    if (requestOptions.path.indexOf('?') < 0) {\n      // If the existing path does not contain any parameters, apply them as the only options.\n      querystring = '?' + qsModule.stringify(options.query)\n    } else {\n      // If the user already added parameters to the URL, we want to add them as additional\n      // parameters.\n      querystring = '&' + qsModule.stringify(options.query)\n    }\n  }\n\n  return requestOptions.path + querystring\n}\n\n/**\n * Set a user access token to be used with library requests.\n *\n * @param {string} accessToken\n */\nVimeo.prototype.setAccessToken = function (accessToken) {\n  this._accessToken = accessToken\n}\n\n/**\n * Exchange a code for an access token. This code should exist on your `redirectUri`.\n *\n * @param {string}   code         The code provided on your `redirectUri`.\n * @param {string}   redirectUri  The exact `redirectUri` provided to `buildAuthorizationEndpoint`\n *                                and configured in your API app settings.\n * @param {Function} fn           Callback to execute on completion.\n */\nVimeo.prototype.accessToken = function (code, redirectUri, fn) {\n  var options = {\n    method: 'POST',\n    hostname: module.exports.request_defaults.hostname,\n    path: authEndpoints.accessToken,\n    query: {\n      grant_type: 'authorization_code',\n      code: code,\n      redirect_uri: redirectUri\n    },\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }\n\n  this.request(options, function (err, body, status, headers) {\n    if (err) {\n      return fn(err, null, status, headers)\n    } else {\n      fn(null, body, status, headers)\n    }\n  })\n}\n\n/**\n * The first step of the authorization process.\n *\n * This function returns a URL, which the user should be sent to (via redirect or link).\n *\n * The destination allows the user to accept or deny connecting with vimeo, and accept or deny each\n * of the scopes you requested. Scopes are passed through the second parameter as an array of\n * strings, or a space delimited list.\n *\n * Once accepted or denied, the user is redirected back to the `redirectUri`.\n *\n * @param  {string} redirectUri   The URI that will exchange a code for an access token. Must match\n *                                the URI in your API app settings.\n * @param  {string} scope         An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n *                                for more.\n * @param  {string} state         A unique state that will be returned to you on your redirect URI.\n */\nVimeo.prototype.buildAuthorizationEndpoint = function (redirectUri, scope, state) {\n  var query = {\n    response_type: 'code',\n    client_id: this._clientId,\n    redirect_uri: redirectUri\n  }\n\n  if (scope) {\n    if (Array.isArray(scope)) {\n      query.scope = scope.join(' ')\n    } else {\n      query.scope = scope\n    }\n  } else {\n    query.scope = 'public'\n  }\n\n  if (state) {\n    query.state = state\n  }\n\n  return module.exports.request_defaults.protocol +\n    '//' +\n    module.exports.request_defaults.hostname +\n    authEndpoints.authorization +\n    '?' +\n    qsModule.stringify(query)\n}\n\n/**\n * Generates an unauthenticated access token. This is necessary to make unauthenticated requests\n *\n * @param  {string}   scope An array of scopes. See https://developer.vimeo.com/api/authentication#scopes\n *                          for more.\n * @param  {Function} fn    A function that is called when the request is complete. If an error\n *                          occured the first parameter will be that error, otherwise the first\n *                          parameter will be null.\n */\nVimeo.prototype.generateClientCredentials = function (scope, fn) {\n  var query = {\n    grant_type: 'client_credentials'\n  }\n\n  if (scope) {\n    if (Array.isArray(scope)) {\n      query.scope = scope.join(' ')\n    } else {\n      query.scope = scope\n    }\n  } else {\n    query.scope = 'public'\n  }\n\n  this.request({\n    method: 'POST',\n    hostname: module.exports.request_defaults.hostname,\n    path: authEndpoints.clientCredentials,\n    query: query,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }, function (err, body, status, headers) {\n    if (err) {\n      return fn(err, null, status, headers)\n    } else {\n      fn(null, body, status, headers)\n    }\n  })\n}\n\n/**\n * Upload a file.\n *\n * This should be used to upload a local file. If you want a form for your site to upload direct to\n * Vimeo, you should look at the `POST /me/videos` endpoint.\n *\n * https://developer.vimeo.com/api/endpoints/videos#POST/users/{user_id}/videos\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {object=}   params            Parameters to send when creating a new video (name,\n *                                      privacy restrictions, etc.). See the API documentation for\n *                                      supported parameters.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\nVimeo.prototype.upload = function (\n  file,\n  params,\n  completeCallback,\n  progressCallback,\n  errorCallback\n) {\n  var _self = this\n  var fileSize\n\n  if (typeof params === 'function') {\n    errorCallback = progressCallback\n    progressCallback = completeCallback\n    completeCallback = params\n    params = {}\n  }\n\n  if (typeof file === 'string') {\n    try {\n      fileSize = fs.statSync(file).size\n    } catch (e) {\n      return errorCallback('Unable to locate file to upload.')\n    }\n  } else {\n    fileSize = file.size\n  }\n\n  // Ignore any specified upload approach and size.\n  if (typeof params.upload === 'undefined') {\n    params.upload = {\n      'approach': 'tus',\n      'size': fileSize\n    }\n  } else {\n    params.upload.approach = 'tus'\n    params.upload.size = fileSize\n  }\n\n  var options = {\n    path: '/me/videos?fields=uri,name,upload',\n    method: 'POST',\n    query: params\n  }\n\n  // Use JSON filtering so we only receive the data that we need to make an upload happen.\n  this.request(options, function (err, attempt, status) {\n    if (err) {\n      return errorCallback('Unable to initiate an upload. [' + err + ']')\n    }\n\n    _self._performTusUpload(\n      file,\n      fileSize,\n      attempt,\n      completeCallback,\n      progressCallback,\n      errorCallback\n    )\n  })\n}\n\n/**\n * Replace the source of a single Vimeo video.\n *\n * https://developer.vimeo.com/api/endpoints/videos#POST/videos/{video_id}/versions\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {string}    videoUri          Video URI of the video file to replace.\n * @param {object=}   params            Parameters to send when creating a new video (name,\n *                                      privacy restrictions, etc.). See the API documentation for\n *                                      supported parameters.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\nVimeo.prototype.replace = function (\n  file,\n  videoUri,\n  params,\n  completeCallback,\n  progressCallback,\n  errorCallback\n) {\n  var _self = this\n  var fileSize\n\n  if (typeof params === 'function') {\n    errorCallback = progressCallback\n    progressCallback = completeCallback\n    completeCallback = params\n    params = {}\n  }\n\n  if (typeof file === 'string') {\n    try {\n      fileSize = fs.statSync(file).size\n    } catch (e) {\n      return errorCallback('Unable to locate file to upload.')\n    }\n\n    params.file_name = path.basename(file)\n  } else {\n    fileSize = file.size\n    params.file_name = file.name\n  }\n\n  // Ignore any specified upload approach and size.\n  if (typeof params.upload === 'undefined') {\n    params.upload = {\n      'approach': 'tus',\n      'size': fileSize\n    }\n  } else {\n    params.upload.approach = 'tus'\n    params.upload.size = fileSize\n  }\n\n  var options = {\n    path: videoUri + '/versions?fields=upload',\n    method: 'POST',\n    query: params\n  }\n\n  // Use JSON filtering so we only receive the data that we need to make an upload happen.\n  _self.request(options, function (err, attempt, status) {\n    if (err) {\n      return errorCallback('Unable to initiate an upload. [' + err + ']')\n    }\n\n    attempt.uri = videoUri\n\n    _self._performTusUpload(\n      file,\n      fileSize,\n      attempt,\n      completeCallback,\n      progressCallback,\n      errorCallback\n    )\n  })\n}\n\n/**\n * Take an upload attempt and perform the actual upload via tus.\n *\n * https://tus.io/\n *\n * @param {string}    filePath          Path to the file you wish to upload.\n * @param {integer}   fileSize          Size of the file that will be uploaded.\n * @param {Object}    attempt           Upload attempt data.\n * @param {Function}  completeCallback  Callback to be executed when the upload completes.\n * @param {Function}  progressCallback  Callback to be executed when the upload progress is updated.\n * @param {Function}  errorCallback     Callback to be executed when the upload returns an error.\n */\nVimeo.prototype._performTusUpload = function (\n  file,\n  fileSize,\n  attempt,\n  completeCallback,\n  progressCallback,\n  errorCallback\n) {\n  var fileUpload = file\n\n  if (typeof file === 'string') {\n    fileUpload = fs.createReadStream(file)\n  }\n\n  var upload = new tus.Upload(fileUpload, {\n    endpoint: 'none',\n    uploadSize: fileSize,\n    retryDelays: [0, 1000, 3000, 5000],\n    onError: errorCallback,\n    onProgress: progressCallback,\n    onSuccess: function () {\n      return completeCallback(attempt.uri)\n    }\n  })\n\n  upload.url = attempt.upload.upload_link\n  upload.start()\n}\n"]},"metadata":{},"sourceType":"script"}