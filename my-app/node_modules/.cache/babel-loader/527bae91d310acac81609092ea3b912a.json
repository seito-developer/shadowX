{"ast":null,"code":"import random from 'random';\nimport roundTo from 'round-to';\n\nconst putPattern = () => {\n  const base = Math.random();\n\n  if (base < 0.1) {\n    return 'points';\n  } else {\n    if (base >= 0.1 && base <= 0.25) {\n      return 'integer1';\n    } else if (base >= 0.26 && base <= 0.4) {\n      return 'integer2';\n    } else if (base >= 0.41 && base <= 0.7) {\n      return 'integer3';\n    } else {\n      return 'integer4';\n    }\n  }\n};\n\nconst randomCounts = () => {\n  const pattern = putPattern();\n  let val;\n\n  switch (pattern) {\n    case 'points':\n      const n = 2;\n      val = roundTo(Math.floor(Math.random() * Math.pow(10, n)) / Math.pow(10, n), 3);\n      break;\n\n    case 'integer1':\n      val = random.int(0, 100);\n      break;\n\n    case 'integer2':\n      val = roundTo(random.int(1000, 10000), -1);\n      break;\n\n    case 'integer3':\n      val = roundTo(random.int(10000, 100000000), -6);\n      break;\n\n    case 'integer4':\n      val = roundTo(random.int(100000000, 100000000000), -8);\n      break;\n\n    default:\n      val = random.int(0, 100);\n      break;\n  }\n\n  return val.toString();\n};\n\nexport default randomCounts;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/src/funcRandomCounts.ts"],"names":["random","roundTo","putPattern","base","Math","randomCounts","pattern","val","n","floor","pow","int","toString"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,IAAW,GAAGC,IAAI,CAACJ,MAAL,EAApB;;AACA,MAAGG,IAAI,GAAG,GAAV,EAAc;AACZ,WAAO,QAAP;AACD,GAFD,MAEO;AACL,QAAGA,IAAI,IAAI,GAAR,IAAeA,IAAI,IAAI,IAA1B,EAA+B;AAC7B,aAAO,UAAP;AACD,KAFD,MAEO,IAAGA,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,GAA3B,EAA+B;AACpC,aAAO,UAAP;AACD,KAFM,MAEA,IAAGA,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,GAA3B,EAA+B;AACpC,aAAO,UAAP;AACD,KAFM,MAEA;AACL,aAAO,UAAP;AACD;AACF;AACF,CAfD;;AAiBA,MAAME,YAAY,GAAG,MAAM;AACzB,QAAMC,OAAc,GAAGJ,UAAU,EAAjC;AACA,MAAIK,GAAJ;;AAEA,UAAOD,OAAP;AACE,SAAK,QAAL;AACE,YAAME,CAAC,GAAG,CAAV;AACID,MAAAA,GAAG,GAAGN,OAAO,CAACG,IAAI,CAACK,KAAL,CAAYL,IAAI,CAACJ,MAAL,KAAgBI,IAAI,CAACM,GAAL,CAAU,EAAV,EAAcF,CAAd,CAA5B,IAAkDJ,IAAI,CAACM,GAAL,CAAU,EAAV,EAAcF,CAAd,CAAnD,EAAsE,CAAtE,CAAb;AACJ;;AACF,SAAK,UAAL;AACED,MAAAA,GAAG,GAAGP,MAAM,CAACW,GAAP,CAAW,CAAX,EAAc,GAAd,CAAN;AACA;;AACF,SAAK,UAAL;AACEJ,MAAAA,GAAG,GAAGN,OAAO,CAACD,MAAM,CAACW,GAAP,CAAW,IAAX,EAAiB,KAAjB,CAAD,EAA0B,CAAC,CAA3B,CAAb;AACA;;AACF,SAAK,UAAL;AACEJ,MAAAA,GAAG,GAAGN,OAAO,CAACD,MAAM,CAACW,GAAP,CAAW,KAAX,EAAkB,SAAlB,CAAD,EAA+B,CAAC,CAAhC,CAAb;AACA;;AACF,SAAK,UAAL;AACEJ,MAAAA,GAAG,GAAGN,OAAO,CAACD,MAAM,CAACW,GAAP,CAAW,SAAX,EAAsB,YAAtB,CAAD,EAAsC,CAAC,CAAvC,CAAb;AACA;;AACF;AACEJ,MAAAA,GAAG,GAAGP,MAAM,CAACW,GAAP,CAAW,CAAX,EAAc,GAAd,CAAN;AACA;AAnBJ;;AAsBA,SAAOJ,GAAG,CAACK,QAAJ,EAAP;AACD,CA3BD;;AA6BA,eAAeP,YAAf","sourcesContent":["import random from 'random';\nimport roundTo from 'round-to';\n\nconst putPattern = () => {\n  const base:number = Math.random();\n  if(base < 0.1){\n    return 'points';\n  } else {\n    if(base >= 0.1 && base <= 0.25){\n      return 'integer1';\n    } else if(base >= 0.26 && base <= 0.4){\n      return 'integer2';\n    } else if(base >= 0.41 && base <= 0.7){\n      return 'integer3';\n    } else {\n      return 'integer4';\n    }\n  }\n}\n\nconst randomCounts = () => {\n  const pattern:string = putPattern();\n  let val:number;\n\n  switch(pattern){\n    case 'points':\n      const n = 2;\n          val = roundTo(Math.floor( Math.random() * Math.pow( 10, n ) ) / Math.pow( 10, n ), 3);\n      break;\n    case 'integer1':\n      val = random.int(0, 100);\n      break;\n    case 'integer2':\n      val = roundTo(random.int(1000, 10000), -1);\n      break;\n    case 'integer3':\n      val = roundTo(random.int(10000, 100000000), -6);\n      break;\n    case 'integer4':\n      val = roundTo(random.int(100000000, 100000000000), -8);\n      break;\n    default:\n      val = random.int(0, 100);\n      break;\n  }\n  \n  return val.toString();\n}\n\nexport default randomCounts;"]},"metadata":{},"sourceType":"module"}