{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"../util/cloneNodes\"));\n\nvar _buildMediaQuery = _interopRequireDefault(require(\"../util/buildMediaQuery\"));\n\nvar _buildSelectorVariant = _interopRequireDefault(require(\"../util/buildSelectorVariant\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isLayer(node) {\n  if (Array.isArray(node)) {\n    return node.length === 1 && isLayer(node[0]);\n  }\n\n  return node.type === 'atrule' && node.name === 'layer';\n}\n\nfunction layerNodes(nodes) {\n  return isLayer(nodes) ? nodes[0].nodes : nodes;\n}\n\nfunction _default(config) {\n  return function (css) {\n    // Wrap any `responsive` rules with a copy of their parent `layer` to\n    // ensure the layer isn't lost when copying to the `screens` location.\n    css.walkAtRules('layer', layerAtRule => {\n      const layer = layerAtRule.params;\n      layerAtRule.walkAtRules('responsive', responsiveAtRule => {\n        const nestedlayerAtRule = _postcss.default.atRule({\n          name: 'layer',\n          params: layer\n        });\n\n        nestedlayerAtRule.prepend(responsiveAtRule.nodes);\n        responsiveAtRule.removeAll();\n        responsiveAtRule.prepend(nestedlayerAtRule);\n      });\n    });\n    const {\n      theme: {\n        screens\n      },\n      separator\n    } = config;\n\n    const responsiveRules = _postcss.default.root();\n\n    const finalRules = [];\n    css.walkAtRules('responsive', atRule => {\n      const nodes = atRule.nodes;\n      responsiveRules.append(...(0, _cloneNodes.default)(nodes)); // If the parent is already a `layer` (this is true for anything coming from\n      // a plugin, including core plugins) we don't want to create a double nested\n      // layer, so only insert the layer children. If there is no parent layer,\n      // preserve the layer information when inserting the nodes.\n\n      if (isLayer(atRule.parent)) {\n        atRule.before(layerNodes(nodes));\n      } else {\n        atRule.before(nodes);\n      }\n\n      atRule.remove();\n    });\n\n    _lodash.default.keys(screens).forEach(screen => {\n      const mediaQuery = _postcss.default.atRule({\n        name: 'media',\n        params: (0, _buildMediaQuery.default)(screens[screen])\n      });\n\n      mediaQuery.append(_lodash.default.tap(responsiveRules.clone(), clonedRoot => {\n        clonedRoot.walkRules(rule => {\n          rule.selectors = _lodash.default.map(rule.selectors, selector => (0, _buildSelectorVariant.default)(selector, screen, separator, message => {\n            throw rule.error(message);\n          }));\n        });\n      }));\n      finalRules.push(mediaQuery);\n    });\n\n    const hasScreenRules = finalRules.some(i => i.nodes.length !== 0);\n    css.walkAtRules('tailwind', atRule => {\n      if (atRule.params !== 'screens') {\n        return;\n      }\n\n      if (hasScreenRules) {\n        atRule.before(finalRules);\n      }\n\n      atRule.remove();\n    });\n  };\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/lib/substituteResponsiveAtRules.js"],"names":["Object","defineProperty","exports","value","default","_default","_lodash","_interopRequireDefault","require","_postcss","_cloneNodes","_buildMediaQuery","_buildSelectorVariant","obj","__esModule","isLayer","node","Array","isArray","length","type","name","layerNodes","nodes","config","css","walkAtRules","layerAtRule","layer","params","responsiveAtRule","nestedlayerAtRule","atRule","prepend","removeAll","theme","screens","separator","responsiveRules","root","finalRules","append","parent","before","remove","keys","forEach","screen","mediaQuery","tap","clone","clonedRoot","walkRules","rule","selectors","map","selector","message","error","push","hasScreenRules","some","i"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"../util/cloneNodes\"));\n\nvar _buildMediaQuery = _interopRequireDefault(require(\"../util/buildMediaQuery\"));\n\nvar _buildSelectorVariant = _interopRequireDefault(require(\"../util/buildSelectorVariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isLayer(node) {\n  if (Array.isArray(node)) {\n    return node.length === 1 && isLayer(node[0]);\n  }\n\n  return node.type === 'atrule' && node.name === 'layer';\n}\n\nfunction layerNodes(nodes) {\n  return isLayer(nodes) ? nodes[0].nodes : nodes;\n}\n\nfunction _default(config) {\n  return function (css) {\n    // Wrap any `responsive` rules with a copy of their parent `layer` to\n    // ensure the layer isn't lost when copying to the `screens` location.\n    css.walkAtRules('layer', layerAtRule => {\n      const layer = layerAtRule.params;\n      layerAtRule.walkAtRules('responsive', responsiveAtRule => {\n        const nestedlayerAtRule = _postcss.default.atRule({\n          name: 'layer',\n          params: layer\n        });\n\n        nestedlayerAtRule.prepend(responsiveAtRule.nodes);\n        responsiveAtRule.removeAll();\n        responsiveAtRule.prepend(nestedlayerAtRule);\n      });\n    });\n    const {\n      theme: {\n        screens\n      },\n      separator\n    } = config;\n\n    const responsiveRules = _postcss.default.root();\n\n    const finalRules = [];\n    css.walkAtRules('responsive', atRule => {\n      const nodes = atRule.nodes;\n      responsiveRules.append(...(0, _cloneNodes.default)(nodes)); // If the parent is already a `layer` (this is true for anything coming from\n      // a plugin, including core plugins) we don't want to create a double nested\n      // layer, so only insert the layer children. If there is no parent layer,\n      // preserve the layer information when inserting the nodes.\n\n      if (isLayer(atRule.parent)) {\n        atRule.before(layerNodes(nodes));\n      } else {\n        atRule.before(nodes);\n      }\n\n      atRule.remove();\n    });\n\n    _lodash.default.keys(screens).forEach(screen => {\n      const mediaQuery = _postcss.default.atRule({\n        name: 'media',\n        params: (0, _buildMediaQuery.default)(screens[screen])\n      });\n\n      mediaQuery.append(_lodash.default.tap(responsiveRules.clone(), clonedRoot => {\n        clonedRoot.walkRules(rule => {\n          rule.selectors = _lodash.default.map(rule.selectors, selector => (0, _buildSelectorVariant.default)(selector, screen, separator, message => {\n            throw rule.error(message);\n          }));\n        });\n      }));\n      finalRules.push(mediaQuery);\n    });\n\n    const hasScreenRules = finalRules.some(i => i.nodes.length !== 0);\n    css.walkAtRules('tailwind', atRule => {\n      if (atRule.params !== 'screens') {\n        return;\n      }\n\n      if (hasScreenRules) {\n        atRule.before(finalRules);\n      }\n\n      atRule.remove();\n    });\n  };\n}"]},"metadata":{},"sourceType":"script"}