{"ast":null,"code":"var xtend = require('xtend');\n\nvar walk = require('acorn-walk');\n\nvar base = xtend(walk.base);\n\nbase.Import = function () {};\n\nfunction simple(node, visitors, baseVisitor, state, override) {\n  return walk.simple(node, visitors, baseVisitor || base, state, override);\n}\n\nfunction ancestor(node, visitors, baseVisitor, state) {\n  return walk.ancestor(node, visitors, baseVisitor || base, state);\n}\n\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  return walk.recursive(node, state, funcs, baseVisitor || base, override);\n}\n\nfunction full(node, callback, baseVisitor, state, override) {\n  return walk.full(node, callback, baseVisitor || base, state, override);\n}\n\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  return walk.fullAncestor(node, callback, baseVisitor || base, state);\n}\n\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  return walk.findNodeAt(node, start, end, test, baseVisitor || base, state);\n}\n\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  return walk.findNodeAround(node, pos, test, baseVisitor || base, state);\n}\n\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  return walk.findNodeAfter(node, pos, test, baseVisitor || base, state);\n}\n\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  return walk.findNodeBefore(node, pos, test, baseVisitor || base, state);\n}\n\nfunction make(funcs, baseVisitor) {\n  return walk.make(funcs, baseVisitor || base);\n}\n\nexports.simple = simple;\nexports.ancestor = ancestor;\nexports.recursive = recursive;\nexports.full = full;\nexports.fullAncestor = fullAncestor;\nexports.findNodeAt = findNodeAt;\nexports.findNodeAround = findNodeAround;\nexports.findNodeAfter = findNodeAfter;\nexports.findNodeBefore = findNodeBefore;\nexports.make = make;\nexports.base = base;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/acorn-node/walk.js"],"names":["xtend","require","walk","base","Import","simple","node","visitors","baseVisitor","state","override","ancestor","recursive","funcs","full","callback","fullAncestor","findNodeAt","start","end","test","findNodeAround","pos","findNodeAfter","findNodeBefore","make","exports"],"mappings":"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","sourcesContent":["var xtend = require('xtend')\nvar walk = require('acorn-walk')\n\nvar base = xtend(walk.base)\nbase.Import = function () {}\n\nfunction simple (node, visitors, baseVisitor, state, override) {\n  return walk.simple(node, visitors, baseVisitor || base, state, override)\n}\n\nfunction ancestor (node, visitors, baseVisitor, state) {\n  return walk.ancestor(node, visitors, baseVisitor || base, state)\n}\n\nfunction recursive (node, state, funcs, baseVisitor, override) {\n  return walk.recursive(node, state, funcs, baseVisitor || base, override)\n}\n\nfunction full (node, callback, baseVisitor, state, override) {\n  return walk.full(node, callback, baseVisitor || base, state, override)\n}\n\nfunction fullAncestor (node, callback, baseVisitor, state) {\n  return walk.fullAncestor(node, callback, baseVisitor || base, state)\n}\n\nfunction findNodeAt (node, start, end, test, baseVisitor, state) {\n  return walk.findNodeAt(node, start, end, test, baseVisitor || base, state)\n}\n\nfunction findNodeAround (node, pos, test, baseVisitor, state) {\n  return walk.findNodeAround(node, pos, test, baseVisitor || base, state)\n}\n\nfunction findNodeAfter (node, pos, test, baseVisitor, state) {\n  return walk.findNodeAfter(node, pos, test, baseVisitor || base, state)\n}\n\nfunction findNodeBefore (node, pos, test, baseVisitor, state) {\n  return walk.findNodeBefore(node, pos, test, baseVisitor || base, state)\n}\n\nfunction make (funcs, baseVisitor) {\n  return walk.make(funcs, baseVisitor || base)\n}\n\nexports.simple = simple\nexports.ancestor = ancestor\nexports.recursive = recursive\nexports.full = full\nexports.fullAncestor = fullAncestor\nexports.findNodeAt = findNodeAt\nexports.findNodeAround = findNodeAround\nexports.findNodeAfter = findNodeAfter\nexports.findNodeBefore = findNodeBefore\nexports.make = make\nexports.base = base\n"]},"metadata":{},"sourceType":"script"}