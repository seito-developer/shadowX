{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseAnimationValue;\nconst DIRECTIONS = new Set(['normal', 'reverse', 'alternate', 'alternate-reverse']);\nconst PLAY_STATES = new Set(['running', 'paused']);\nconst FILL_MODES = new Set(['none', 'forwards', 'backwards', 'both']);\nconst ITERATION_COUNTS = new Set(['infinite']);\nconst TIMINGS = new Set(['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out']);\nconst TIMING_FNS = ['cubic-bezier', 'steps'];\nconst COMMA = /\\,(?![^(]*\\))/g; // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n\nconst SPACE = /\\ (?![^(]*\\))/g; // Similar to the one above, but with spaces instead.\n\nconst TIME = /^(-?[\\d.]+m?s)$/;\nconst DIGIT = /^(\\d+)$/;\n\nfunction parseAnimationValue(input) {\n  const animations = input.split(COMMA);\n  const result = animations.map(animation => {\n    const result = {};\n    const parts = animation.split(SPACE);\n\n    for (let part of parts) {\n      if (DIRECTIONS.has(part)) result.direction = part;else if (PLAY_STATES.has(part)) result.playState = part;else if (FILL_MODES.has(part)) result.fillMode = part;else if (ITERATION_COUNTS.has(part)) result.iterationCount = part;else if (TIMINGS.has(part)) result.timingFunction = part;else if (TIMING_FNS.some(f => part.startsWith(`${f}(`))) result.timingFunction = part;else if (TIME.test(part)) result[result.duration === undefined ? 'duration' : 'delay'] = part;else if (DIGIT.test(part)) result.iterationCount = part;else result.name = part;\n    }\n\n    return result;\n  });\n  return animations.length > 1 ? result : result[0];\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/util/parseAnimationValue.js"],"names":["Object","defineProperty","exports","value","default","parseAnimationValue","DIRECTIONS","Set","PLAY_STATES","FILL_MODES","ITERATION_COUNTS","TIMINGS","TIMING_FNS","COMMA","SPACE","TIME","DIGIT","input","animations","split","result","map","animation","parts","part","has","direction","playState","fillMode","iterationCount","timingFunction","some","f","startsWith","test","duration","undefined","name","length"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,mBAAlB;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,mBAAnC,CAAR,CAAnB;AACA,MAAMC,WAAW,GAAG,IAAID,GAAJ,CAAQ,CAAC,SAAD,EAAY,QAAZ,CAAR,CAApB;AACA,MAAME,UAAU,GAAG,IAAIF,GAAJ,CAAQ,CAAC,MAAD,EAAS,UAAT,EAAqB,WAArB,EAAkC,MAAlC,CAAR,CAAnB;AACA,MAAMG,gBAAgB,GAAG,IAAIH,GAAJ,CAAQ,CAAC,UAAD,CAAR,CAAzB;AACA,MAAMI,OAAO,GAAG,IAAIJ,GAAJ,CAAQ,CAAC,QAAD,EAAW,MAAX,EAAmB,SAAnB,EAA8B,UAA9B,EAA0C,aAA1C,CAAR,CAAhB;AACA,MAAMK,UAAU,GAAG,CAAC,cAAD,EAAiB,OAAjB,CAAnB;AACA,MAAMC,KAAK,GAAG,gBAAd,C,CAAgC;;AAEhC,MAAMC,KAAK,GAAG,gBAAd,C,CAAgC;;AAEhC,MAAMC,IAAI,GAAG,iBAAb;AACA,MAAMC,KAAK,GAAG,SAAd;;AAEA,SAASX,mBAAT,CAA6BY,KAA7B,EAAoC;AAClC,QAAMC,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAYN,KAAZ,CAAnB;AACA,QAAMO,MAAM,GAAGF,UAAU,CAACG,GAAX,CAAeC,SAAS,IAAI;AACzC,UAAMF,MAAM,GAAG,EAAf;AACA,UAAMG,KAAK,GAAGD,SAAS,CAACH,KAAV,CAAgBL,KAAhB,CAAd;;AAEA,SAAK,IAAIU,IAAT,IAAiBD,KAAjB,EAAwB;AACtB,UAAIjB,UAAU,CAACmB,GAAX,CAAeD,IAAf,CAAJ,EAA0BJ,MAAM,CAACM,SAAP,GAAmBF,IAAnB,CAA1B,KAAuD,IAAIhB,WAAW,CAACiB,GAAZ,CAAgBD,IAAhB,CAAJ,EAA2BJ,MAAM,CAACO,SAAP,GAAmBH,IAAnB,CAA3B,KAAwD,IAAIf,UAAU,CAACgB,GAAX,CAAeD,IAAf,CAAJ,EAA0BJ,MAAM,CAACQ,QAAP,GAAkBJ,IAAlB,CAA1B,KAAsD,IAAId,gBAAgB,CAACe,GAAjB,CAAqBD,IAArB,CAAJ,EAAgCJ,MAAM,CAACS,cAAP,GAAwBL,IAAxB,CAAhC,KAAkE,IAAIb,OAAO,CAACc,GAAR,CAAYD,IAAZ,CAAJ,EAAuBJ,MAAM,CAACU,cAAP,GAAwBN,IAAxB,CAAvB,KAAyD,IAAIZ,UAAU,CAACmB,IAAX,CAAgBC,CAAC,IAAIR,IAAI,CAACS,UAAL,CAAiB,GAAED,CAAE,GAArB,CAArB,CAAJ,EAAoDZ,MAAM,CAACU,cAAP,GAAwBN,IAAxB,CAApD,KAAsF,IAAIT,IAAI,CAACmB,IAAL,CAAUV,IAAV,CAAJ,EAAqBJ,MAAM,CAACA,MAAM,CAACe,QAAP,KAAoBC,SAApB,GAAgC,UAAhC,GAA6C,OAA9C,CAAN,GAA+DZ,IAA/D,CAArB,KAA8F,IAAIR,KAAK,CAACkB,IAAN,CAAWV,IAAX,CAAJ,EAAsBJ,MAAM,CAACS,cAAP,GAAwBL,IAAxB,CAAtB,KAAwDJ,MAAM,CAACiB,IAAP,GAAcb,IAAd;AAC7gB;;AAED,WAAOJ,MAAP;AACD,GATc,CAAf;AAUA,SAAOF,UAAU,CAACoB,MAAX,GAAoB,CAApB,GAAwBlB,MAAxB,GAAiCA,MAAM,CAAC,CAAD,CAA9C;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseAnimationValue;\nconst DIRECTIONS = new Set(['normal', 'reverse', 'alternate', 'alternate-reverse']);\nconst PLAY_STATES = new Set(['running', 'paused']);\nconst FILL_MODES = new Set(['none', 'forwards', 'backwards', 'both']);\nconst ITERATION_COUNTS = new Set(['infinite']);\nconst TIMINGS = new Set(['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out']);\nconst TIMING_FNS = ['cubic-bezier', 'steps'];\nconst COMMA = /\\,(?![^(]*\\))/g; // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n\nconst SPACE = /\\ (?![^(]*\\))/g; // Similar to the one above, but with spaces instead.\n\nconst TIME = /^(-?[\\d.]+m?s)$/;\nconst DIGIT = /^(\\d+)$/;\n\nfunction parseAnimationValue(input) {\n  const animations = input.split(COMMA);\n  const result = animations.map(animation => {\n    const result = {};\n    const parts = animation.split(SPACE);\n\n    for (let part of parts) {\n      if (DIRECTIONS.has(part)) result.direction = part;else if (PLAY_STATES.has(part)) result.playState = part;else if (FILL_MODES.has(part)) result.fillMode = part;else if (ITERATION_COUNTS.has(part)) result.iterationCount = part;else if (TIMINGS.has(part)) result.timingFunction = part;else if (TIMING_FNS.some(f => part.startsWith(`${f}(`))) result.timingFunction = part;else if (TIME.test(part)) result[result.duration === undefined ? 'duration' : 'delay'] = part;else if (DIGIT.test(part)) result.iterationCount = part;else result.name = part;\n    }\n\n    return result;\n  });\n  return animations.length > 1 ? result : result[0];\n}"]},"metadata":{},"sourceType":"script"}