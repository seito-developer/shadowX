{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _supportsColor = require('supports-color');\n\nvar _supportsColor2 = _interopRequireDefault(_supportsColor);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _terminalHighlight = require('./terminal-highlight');\n\nvar _terminalHighlight2 = _interopRequireDefault(_terminalHighlight);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the {@link Node#error} method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * @example\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if ( error.name === 'CssSyntaxError' ) {\n *     error //=> CssSyntaxError\n *   }\n * }\n *\n * @example\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' });\n */\n\n\nvar CssSyntaxError = function () {\n  /**\n   * @param {string} message  - error message\n   * @param {number} [line]   - source line of the error\n   * @param {number} [column] - source column of the error\n   * @param {string} [source] - source code of the broken file\n   * @param {string} [file]   - absolute path to the broken file\n   * @param {string} [plugin] - PostCSS plugin name, if error came from plugin\n   */\n  function CssSyntaxError(message, line, column, source, file, plugin) {\n    _classCallCheck(this, CssSyntaxError);\n    /**\n     * @member {string} - Always equal to `'CssSyntaxError'`. You should\n     *                    always check error type\n     *                    by `error.name === 'CssSyntaxError'` instead of\n     *                    `error instanceof CssSyntaxError`, because\n     *                    npm could have several PostCSS versions.\n     *\n     * @example\n     * if ( error.name === 'CssSyntaxError' ) {\n     *   error //=> CssSyntaxError\n     * }\n     */\n\n\n    this.name = 'CssSyntaxError';\n    /**\n     * @member {string} - Error message.\n     *\n     * @example\n     * error.message //=> 'Unclosed block'\n     */\n\n    this.reason = message;\n\n    if (file) {\n      /**\n       * @member {string} - Absolute path to the broken file.\n       *\n       * @example\n       * error.file       //=> 'a.sass'\n       * error.input.file //=> 'a.css'\n       */\n      this.file = file;\n    }\n\n    if (source) {\n      /**\n       * @member {string} - Source code of the broken file.\n       *\n       * @example\n       * error.source       //=> 'a { b {} }'\n       * error.input.column //=> 'a b { }'\n       */\n      this.source = source;\n    }\n\n    if (plugin) {\n      /**\n       * @member {string} - Plugin name, if error came from plugin.\n       *\n       * @example\n       * error.plugin //=> 'postcss-vars'\n       */\n      this.plugin = plugin;\n    }\n\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      /**\n       * @member {number} - Source line of the error.\n       *\n       * @example\n       * error.line       //=> 2\n       * error.input.line //=> 4\n       */\n      this.line = line;\n      /**\n       * @member {number} - Source column of the error.\n       *\n       * @example\n       * error.column       //=> 1\n       * error.input.column //=> 4\n       */\n\n      this.column = column;\n    }\n\n    this.setMessage();\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError);\n    }\n  }\n\n  CssSyntaxError.prototype.setMessage = function setMessage() {\n    /**\n     * @member {string} - Full error text in the GNU error format\n     *                    with plugin, file, line and column.\n     *\n     * @example\n     * error.message //=> 'a.css:1:1: Unclosed block'\n     */\n    this.message = this.plugin ? this.plugin + ': ' : '';\n    this.message += this.file ? this.file : '<css input>';\n\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column;\n    }\n\n    this.message += ': ' + this.reason;\n  };\n  /**\n   * Returns a few lines of CSS source that caused the error.\n   *\n   * If the CSS has an input source map without `sourceContent`,\n   * this method will return an empty string.\n   *\n   * @param {boolean} [color] whether arrow will be colored red by terminal\n   *                          color codes. By default, PostCSS will detect\n   *                          color support by `process.stdout.isTTY`\n   *                          and `process.env.NODE_DISABLE_COLORS`.\n   *\n   * @example\n   * error.showSourceCode() //=> \"  4 | }\n   *                        //      5 | a {\n   *                        //    > 6 |   bad\n   *                        //        |   ^\n   *                        //      7 | }\n   *                        //      8 | b {\"\n   *\n   * @return {string} few lines of CSS source that caused the error\n   */\n\n\n  CssSyntaxError.prototype.showSourceCode = function showSourceCode(color) {\n    var _this = this;\n\n    if (!this.source) return '';\n    var css = this.source;\n    if (typeof color === 'undefined') color = _supportsColor2.default.stdout;\n    if (color) css = (0, _terminalHighlight2.default)(css);\n    var lines = css.split(/\\r?\\n/);\n    var start = Math.max(this.line - 3, 0);\n    var end = Math.min(this.line + 2, lines.length);\n    var maxWidth = String(end).length;\n\n    function mark(text) {\n      if (color && _chalk2.default.red) {\n        return _chalk2.default.red.bold(text);\n      } else {\n        return text;\n      }\n    }\n\n    function aside(text) {\n      if (color && _chalk2.default.gray) {\n        return _chalk2.default.gray(text);\n      } else {\n        return text;\n      }\n    }\n\n    return lines.slice(start, end).map(function (line, index) {\n      var number = start + 1 + index;\n      var gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';\n\n      if (number === _this.line) {\n        var spacing = aside(gutter.replace(/\\d/g, ' ')) + line.slice(0, _this.column - 1).replace(/[^\\t]/g, ' ');\n        return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^');\n      } else {\n        return ' ' + aside(gutter) + line;\n      }\n    }).join('\\n');\n  };\n  /**\n   * Returns error position, message and source code of the broken part.\n   *\n   * @example\n   * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n   *                  //    > 1 | a {\n   *                  //        | ^\"\n   *\n   * @return {string} error position, message and source code\n   */\n\n\n  CssSyntaxError.prototype.toString = function toString() {\n    var code = this.showSourceCode();\n\n    if (code) {\n      code = '\\n\\n' + code + '\\n';\n    }\n\n    return this.name + ': ' + this.message + code;\n  };\n  /**\n   * @memberof CssSyntaxError#\n   * @member {Input} input - Input object with PostCSS internal information\n   *                         about input file. If input has source map\n   *                         from previous tool, PostCSS will use origin\n   *                         (for example, Sass) source. You can use this\n   *                         object to get PostCSS input source.\n   *\n   * @example\n   * error.input.file //=> 'a.css'\n   * error.file       //=> 'a.sass'\n   */\n\n\n  return CssSyntaxError;\n}();\n\nexports.default = CssSyntaxError;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["css-syntax-error.es6"],"names":["CssSyntaxError","Error","setMessage","showSourceCode","color","css","supportsColor","lines","start","Math","end","maxWidth","String","chalk","number","gutter","spacing","aside","line","mark","toString","code"],"mappings":"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","sourcesContent":["import supportsColor from 'supports-color';\nimport chalk         from 'chalk';\n\nimport terminalHighlight from './terminal-highlight';\n\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the {@link Node#error} method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * @example\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if ( error.name === 'CssSyntaxError' ) {\n *     error //=> CssSyntaxError\n *   }\n * }\n *\n * @example\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' });\n */\nclass CssSyntaxError {\n\n    /**\n     * @param {string} message  - error message\n     * @param {number} [line]   - source line of the error\n     * @param {number} [column] - source column of the error\n     * @param {string} [source] - source code of the broken file\n     * @param {string} [file]   - absolute path to the broken file\n     * @param {string} [plugin] - PostCSS plugin name, if error came from plugin\n     */\n    constructor(message, line, column, source, file, plugin) {\n        /**\n         * @member {string} - Always equal to `'CssSyntaxError'`. You should\n         *                    always check error type\n         *                    by `error.name === 'CssSyntaxError'` instead of\n         *                    `error instanceof CssSyntaxError`, because\n         *                    npm could have several PostCSS versions.\n         *\n         * @example\n         * if ( error.name === 'CssSyntaxError' ) {\n         *   error //=> CssSyntaxError\n         * }\n         */\n        this.name = 'CssSyntaxError';\n        /**\n         * @member {string} - Error message.\n         *\n         * @example\n         * error.message //=> 'Unclosed block'\n         */\n        this.reason = message;\n\n        if ( file ) {\n            /**\n             * @member {string} - Absolute path to the broken file.\n             *\n             * @example\n             * error.file       //=> 'a.sass'\n             * error.input.file //=> 'a.css'\n             */\n            this.file = file;\n        }\n        if ( source ) {\n            /**\n             * @member {string} - Source code of the broken file.\n             *\n             * @example\n             * error.source       //=> 'a { b {} }'\n             * error.input.column //=> 'a b { }'\n             */\n            this.source = source;\n        }\n        if ( plugin ) {\n            /**\n             * @member {string} - Plugin name, if error came from plugin.\n             *\n             * @example\n             * error.plugin //=> 'postcss-vars'\n             */\n            this.plugin = plugin;\n        }\n        if ( typeof line !== 'undefined' && typeof column !== 'undefined' ) {\n            /**\n             * @member {number} - Source line of the error.\n             *\n             * @example\n             * error.line       //=> 2\n             * error.input.line //=> 4\n             */\n            this.line   = line;\n            /**\n             * @member {number} - Source column of the error.\n             *\n             * @example\n             * error.column       //=> 1\n             * error.input.column //=> 4\n             */\n            this.column = column;\n        }\n\n        this.setMessage();\n\n        if ( Error.captureStackTrace ) {\n            Error.captureStackTrace(this, CssSyntaxError);\n        }\n    }\n\n    setMessage() {\n        /**\n         * @member {string} - Full error text in the GNU error format\n         *                    with plugin, file, line and column.\n         *\n         * @example\n         * error.message //=> 'a.css:1:1: Unclosed block'\n         */\n        this.message  = this.plugin ? this.plugin + ': ' : '';\n        this.message += this.file ? this.file : '<css input>';\n        if ( typeof this.line !== 'undefined' ) {\n            this.message += ':' + this.line + ':' + this.column;\n        }\n        this.message += ': ' + this.reason;\n    }\n\n    /**\n     * Returns a few lines of CSS source that caused the error.\n     *\n     * If the CSS has an input source map without `sourceContent`,\n     * this method will return an empty string.\n     *\n     * @param {boolean} [color] whether arrow will be colored red by terminal\n     *                          color codes. By default, PostCSS will detect\n     *                          color support by `process.stdout.isTTY`\n     *                          and `process.env.NODE_DISABLE_COLORS`.\n     *\n     * @example\n     * error.showSourceCode() //=> \"  4 | }\n     *                        //      5 | a {\n     *                        //    > 6 |   bad\n     *                        //        |   ^\n     *                        //      7 | }\n     *                        //      8 | b {\"\n     *\n     * @return {string} few lines of CSS source that caused the error\n     */\n    showSourceCode(color) {\n        if ( !this.source ) return '';\n\n        let css = this.source;\n        if ( typeof color === 'undefined' ) color = supportsColor.stdout;\n        if ( color ) css = terminalHighlight(css);\n\n        let lines = css.split(/\\r?\\n/);\n        let start = Math.max(this.line - 3, 0);\n        let end   = Math.min(this.line + 2, lines.length);\n\n        let maxWidth = String(end).length;\n\n        function mark(text) {\n            if ( color && chalk.red ) {\n                return chalk.red.bold(text);\n            } else {\n                return text;\n            }\n        }\n        function aside(text) {\n            if ( color && chalk.gray ) {\n                return chalk.gray(text);\n            } else {\n                return text;\n            }\n        }\n\n        return lines.slice(start, end).map( (line, index) => {\n            let number = start + 1 + index;\n            let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';\n            if ( number === this.line ) {\n                let spacing =\n                    aside(gutter.replace(/\\d/g, ' ')) +\n                    line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ');\n                return mark('>') + aside(gutter) + line + '\\n ' +\n                       spacing + mark('^');\n            } else {\n                return ' ' + aside(gutter) + line;\n            }\n        }).join('\\n');\n    }\n\n    /**\n     * Returns error position, message and source code of the broken part.\n     *\n     * @example\n     * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n     *                  //    > 1 | a {\n     *                  //        | ^\"\n     *\n     * @return {string} error position, message and source code\n     */\n    toString() {\n        let code = this.showSourceCode();\n        if ( code ) {\n            code = '\\n\\n' + code + '\\n';\n        }\n        return this.name + ': ' + this.message + code;\n    }\n\n    /**\n     * @memberof CssSyntaxError#\n     * @member {Input} input - Input object with PostCSS internal information\n     *                         about input file. If input has source map\n     *                         from previous tool, PostCSS will use origin\n     *                         (for example, Sass) source. You can use this\n     *                         object to get PostCSS input source.\n     *\n     * @example\n     * error.input.file //=> 'a.css'\n     * error.file       //=> 'a.sass'\n     */\n\n}\n\nexport default CssSyntaxError;\n"]},"metadata":{},"sourceType":"script"}