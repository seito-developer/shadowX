{"ast":null,"code":"let comparisonMap = {\n  atrule: ['name', 'params'],\n  rule: ['selector']\n};\nlet types = new Set(Object.keys(comparisonMap));\n\nfunction collapseAdjacentRules() {\n  return root => {\n    let currentRule = null;\n    root.each(node => {\n      if (!types.has(node.type)) {\n        currentRule = null;\n        return;\n      }\n\n      if (currentRule === null) {\n        currentRule = node;\n        return;\n      }\n\n      let properties = comparisonMap[node.type];\n\n      if (node.type === 'atrule' && node.name === 'font-face') {\n        currentRule = node;\n      } else if (properties.every(property => node[property] === currentRule[property])) {\n        currentRule.append(node.nodes);\n        node.remove();\n      } else {\n        currentRule = node;\n      }\n    });\n  };\n}\n\nmodule.exports = collapseAdjacentRules;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/jit/lib/collapseAdjacentRules.js"],"names":["comparisonMap","atrule","rule","types","Set","Object","keys","collapseAdjacentRules","root","currentRule","each","node","has","type","properties","name","every","property","append","nodes","remove","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,QAAT,CADU;AAElBC,EAAAA,IAAI,EAAE,CAAC,UAAD;AAFY,CAApB;AAIA,IAAIC,KAAK,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYN,aAAZ,CAAR,CAAZ;;AAEA,SAASO,qBAAT,GAAiC;AAC/B,SAAQC,IAAD,IAAU;AACf,QAAIC,WAAW,GAAG,IAAlB;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAWC,IAAD,IAAU;AAClB,UAAI,CAACR,KAAK,CAACS,GAAN,CAAUD,IAAI,CAACE,IAAf,CAAL,EAA2B;AACzBJ,QAAAA,WAAW,GAAG,IAAd;AACA;AACD;;AAED,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxBA,QAAAA,WAAW,GAAGE,IAAd;AACA;AACD;;AAED,UAAIG,UAAU,GAAGd,aAAa,CAACW,IAAI,CAACE,IAAN,CAA9B;;AAEA,UAAIF,IAAI,CAACE,IAAL,KAAc,QAAd,IAA0BF,IAAI,CAACI,IAAL,KAAc,WAA5C,EAAyD;AACvDN,QAAAA,WAAW,GAAGE,IAAd;AACD,OAFD,MAEO,IAAIG,UAAU,CAACE,KAAX,CAAkBC,QAAD,IAAcN,IAAI,CAACM,QAAD,CAAJ,KAAmBR,WAAW,CAACQ,QAAD,CAA7D,CAAJ,EAA8E;AACnFR,QAAAA,WAAW,CAACS,MAAZ,CAAmBP,IAAI,CAACQ,KAAxB;AACAR,QAAAA,IAAI,CAACS,MAAL;AACD,OAHM,MAGA;AACLX,QAAAA,WAAW,GAAGE,IAAd;AACD;AACF,KArBD;AAsBD,GAxBD;AAyBD;;AAEDU,MAAM,CAACC,OAAP,GAAiBf,qBAAjB","sourcesContent":["let comparisonMap = {\n  atrule: ['name', 'params'],\n  rule: ['selector'],\n}\nlet types = new Set(Object.keys(comparisonMap))\n\nfunction collapseAdjacentRules() {\n  return (root) => {\n    let currentRule = null\n    root.each((node) => {\n      if (!types.has(node.type)) {\n        currentRule = null\n        return\n      }\n\n      if (currentRule === null) {\n        currentRule = node\n        return\n      }\n\n      let properties = comparisonMap[node.type]\n\n      if (node.type === 'atrule' && node.name === 'font-face') {\n        currentRule = node\n      } else if (properties.every((property) => node[property] === currentRule[property])) {\n        currentRule.append(node.nodes)\n        node.remove()\n      } else {\n        currentRule = node\n      }\n    })\n  }\n}\n\nmodule.exports = collapseAdjacentRules\n"]},"metadata":{},"sourceType":"script"}