{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatNodes;\n\nfunction indentRecursive(node, indent = 0) {\n  node.each && node.each((child, i) => {\n    if (!child.raws.before || child.raws.before.includes('\\n')) {\n      child.raws.before = `\\n${node.type !== 'rule' && i > 0 ? '\\n' : ''}${'  '.repeat(indent)}`;\n    }\n\n    child.raws.after = `\\n${'  '.repeat(indent)}`;\n    indentRecursive(child, indent + 1);\n  });\n}\n\nfunction formatNodes(root) {\n  indentRecursive(root);\n\n  if (root.first) {\n    root.first.raws.before = '';\n  }\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/lib/formatCSS.js"],"names":["Object","defineProperty","exports","value","default","formatNodes","indentRecursive","node","indent","each","child","i","raws","before","includes","type","repeat","after","root","first"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,WAAlB;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,MAAM,GAAG,CAAxC,EAA2C;AACzCD,EAAAA,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAU,CAACC,KAAD,EAAQC,CAAR,KAAc;AACnC,QAAI,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAZ,IAAsBH,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBC,QAAlB,CAA2B,IAA3B,CAA1B,EAA4D;AAC1DJ,MAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,GAAqB,KAAIN,IAAI,CAACQ,IAAL,KAAc,MAAd,IAAwBJ,CAAC,GAAG,CAA5B,GAAgC,IAAhC,GAAuC,EAAG,GAAE,KAAKK,MAAL,CAAYR,MAAZ,CAAoB,EAAzF;AACD;;AAEDE,IAAAA,KAAK,CAACE,IAAN,CAAWK,KAAX,GAAoB,KAAI,KAAKD,MAAL,CAAYR,MAAZ,CAAoB,EAA5C;AACAF,IAAAA,eAAe,CAACI,KAAD,EAAQF,MAAM,GAAG,CAAjB,CAAf;AACD,GAPY,CAAb;AAQD;;AAED,SAASH,WAAT,CAAqBa,IAArB,EAA2B;AACzBZ,EAAAA,eAAe,CAACY,IAAD,CAAf;;AAEA,MAAIA,IAAI,CAACC,KAAT,EAAgB;AACdD,IAAAA,IAAI,CAACC,KAAL,CAAWP,IAAX,CAAgBC,MAAhB,GAAyB,EAAzB;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatNodes;\n\nfunction indentRecursive(node, indent = 0) {\n  node.each && node.each((child, i) => {\n    if (!child.raws.before || child.raws.before.includes('\\n')) {\n      child.raws.before = `\\n${node.type !== 'rule' && i > 0 ? '\\n' : ''}${'  '.repeat(indent)}`;\n    }\n\n    child.raws.after = `\\n${'  '.repeat(indent)}`;\n    indentRecursive(child, indent + 1);\n  });\n}\n\nfunction formatNodes(root) {\n  indentRecursive(root);\n\n  if (root.first) {\n    root.first.raws.before = '';\n  }\n}"]},"metadata":{},"sourceType":"script"}