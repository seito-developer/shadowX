{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}');\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\n\n\nvar Root = function (_Container) {\n  _inherits(Root, _Container);\n\n  function Root(defaults) {\n    _classCallCheck(this, Root);\n\n    var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));\n\n    _this.type = 'root';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n\n  Root.prototype.removeChild = function removeChild(child, ignore) {\n    var index = this.index(child);\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before;\n    }\n\n    return _Container.prototype.removeChild.call(this, child);\n  };\n\n  Root.prototype.normalize = function normalize(child, sample, type) {\n    var nodes = _Container.prototype.normalize.call(this, child);\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before;\n        } else {\n          delete sample.raws.before;\n        }\n      } else if (this.first !== sample) {\n        for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var node = _ref;\n          node.raws.before = sample.raws.before;\n        }\n      }\n    }\n\n    return nodes;\n  };\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] - options with only `to` and `map` keys\n   *\n   * @return {Result} result with current root’s CSS\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' });\n   * const root2 = postcss.parse(css2, { from: 'b.css' });\n   * root1.append(root2);\n   * const result = root1.toResult({ to: 'all.css', map: true });\n   */\n\n\n  Root.prototype.toResult = function toResult() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var LazyResult = require('./lazy-result');\n\n    var Processor = require('./processor');\n\n    var lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  };\n  /**\n   * @memberof Root#\n   * @member {object} raws - Information to generate byte-to-byte equal\n   *                         node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */\n\n\n  return Root;\n}(_container2.default);\n\nexports.default = Root;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["root.es6"],"names":["Root","Container","removeChild","child","ignore","index","normalize","sample","type","nodes","node","toResult","opts","LazyResult","require","Processor","lazy"],"mappings":"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","sourcesContent":["import Container from './container';\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}');\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nclass Root extends Container {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'root';\n        if ( !this.nodes ) this.nodes = [];\n    }\n\n    removeChild(child, ignore) {\n        const index = this.index(child);\n\n        if ( !ignore && index === 0 && this.nodes.length > 1 ) {\n            this.nodes[1].raws.before = this.nodes[index].raws.before;\n        }\n\n        return super.removeChild(child);\n    }\n\n    normalize(child, sample, type) {\n        let nodes = super.normalize(child);\n\n        if ( sample ) {\n            if ( type === 'prepend' ) {\n                if ( this.nodes.length > 1 ) {\n                    sample.raws.before = this.nodes[1].raws.before;\n                } else {\n                    delete sample.raws.before;\n                }\n            } else if ( this.first !== sample ) {\n                for ( let node of nodes ) {\n                    node.raws.before = sample.raws.before;\n                }\n            }\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Returns a {@link Result} instance representing the root’s CSS.\n     *\n     * @param {processOptions} [opts] - options with only `to` and `map` keys\n     *\n     * @return {Result} result with current root’s CSS\n     *\n     * @example\n     * const root1 = postcss.parse(css1, { from: 'a.css' });\n     * const root2 = postcss.parse(css2, { from: 'b.css' });\n     * root1.append(root2);\n     * const result = root1.toResult({ to: 'all.css', map: true });\n     */\n    toResult(opts = { }) {\n        let LazyResult = require('./lazy-result');\n        let Processor  = require('./processor');\n\n        let lazy = new LazyResult(new Processor(), this, opts);\n        return lazy.stringify();\n    }\n\n    /**\n     * @memberof Root#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `after`: the space symbols after the last child to the end of file.\n     * * `semicolon`: is the last child has an (optional) semicolon.\n     *\n     * @example\n     * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n     * postcss.parse('a {}').raws   //=> { after: '' }\n     */\n\n}\n\nexport default Root;\n"]},"metadata":{},"sourceType":"script"}