{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = generateVariantFunction;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _useMemo = require(\"./useMemo\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst classNameParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.first.filter(({\n    type\n  }) => type === 'class').pop().value;\n});\nconst getClassNameFromSelector = (0, _useMemo.useMemo)(selector => classNameParser.transformSync(selector), selector => selector);\n\nfunction generateVariantFunction(generator, options = {}) {\n  return {\n    options,\n    handler: (container, config) => {\n      const cloned = _postcss.default.root({\n        nodes: container.clone().nodes\n      });\n\n      container.before(_lodash.default.defaultTo(generator({\n        container: cloned,\n        separator: config.separator,\n        modifySelectors: modifierFunction => {\n          cloned.each(rule => {\n            if (rule.type !== 'rule') {\n              return;\n            }\n\n            rule.selectors = rule.selectors.map(selector => {\n              return modifierFunction({\n                get className() {\n                  return getClassNameFromSelector(selector);\n                },\n\n                selector\n              });\n            });\n          });\n          return cloned;\n        }\n      }), cloned).nodes);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/tailwindcss/lib/util/generateVariantFunction.js"],"names":["Object","defineProperty","exports","value","default","generateVariantFunction","_lodash","_interopRequireDefault","require","_postcss","_postcssSelectorParser","_useMemo","obj","__esModule","classNameParser","selectors","first","filter","type","pop","getClassNameFromSelector","useMemo","selector","transformSync","generator","options","handler","container","config","cloned","root","nodes","clone","before","defaultTo","separator","modifySelectors","modifierFunction","each","rule","map","className"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,uBAAlB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,IAAIC,QAAQ,GAAGF,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAArC;;AAEA,IAAIE,sBAAsB,GAAGH,sBAAsB,CAACC,OAAO,CAAC,yBAAD,CAAR,CAAnD;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;AAE/F,MAAME,eAAe,GAAG,CAAC,GAAGJ,sBAAsB,CAACN,OAA3B,EAAoCW,SAAS,IAAI;AACvE,SAAOA,SAAS,CAACC,KAAV,CAAgBC,MAAhB,CAAuB,CAAC;AAC7BC,IAAAA;AAD6B,GAAD,KAExBA,IAAI,KAAK,OAFR,EAEiBC,GAFjB,GAEuBhB,KAF9B;AAGD,CAJuB,CAAxB;AAKA,MAAMiB,wBAAwB,GAAG,CAAC,GAAGT,QAAQ,CAACU,OAAb,EAAsBC,QAAQ,IAAIR,eAAe,CAACS,aAAhB,CAA8BD,QAA9B,CAAlC,EAA2EA,QAAQ,IAAIA,QAAvF,CAAjC;;AAEA,SAASjB,uBAAT,CAAiCmB,SAAjC,EAA4CC,OAAO,GAAG,EAAtD,EAA0D;AACxD,SAAO;AACLA,IAAAA,OADK;AAELC,IAAAA,OAAO,EAAE,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAC9B,YAAMC,MAAM,GAAGpB,QAAQ,CAACL,OAAT,CAAiB0B,IAAjB,CAAsB;AACnCC,QAAAA,KAAK,EAAEJ,SAAS,CAACK,KAAV,GAAkBD;AADU,OAAtB,CAAf;;AAIAJ,MAAAA,SAAS,CAACM,MAAV,CAAiB3B,OAAO,CAACF,OAAR,CAAgB8B,SAAhB,CAA0BV,SAAS,CAAC;AACnDG,QAAAA,SAAS,EAAEE,MADwC;AAEnDM,QAAAA,SAAS,EAAEP,MAAM,CAACO,SAFiC;AAGnDC,QAAAA,eAAe,EAAEC,gBAAgB,IAAI;AACnCR,UAAAA,MAAM,CAACS,IAAP,CAAYC,IAAI,IAAI;AAClB,gBAAIA,IAAI,CAACrB,IAAL,KAAc,MAAlB,EAA0B;AACxB;AACD;;AAEDqB,YAAAA,IAAI,CAACxB,SAAL,GAAiBwB,IAAI,CAACxB,SAAL,CAAeyB,GAAf,CAAmBlB,QAAQ,IAAI;AAC9C,qBAAOe,gBAAgB,CAAC;AACtB,oBAAII,SAAJ,GAAgB;AACd,yBAAOrB,wBAAwB,CAACE,QAAD,CAA/B;AACD,iBAHqB;;AAKtBA,gBAAAA;AALsB,eAAD,CAAvB;AAOD,aARgB,CAAjB;AASD,WAdD;AAeA,iBAAOO,MAAP;AACD;AApBkD,OAAD,CAAnC,EAqBbA,MArBa,EAqBLE,KArBZ;AAsBD;AA7BI,GAAP;AA+BD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = generateVariantFunction;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _useMemo = require(\"./useMemo\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst classNameParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.first.filter(({\n    type\n  }) => type === 'class').pop().value;\n});\nconst getClassNameFromSelector = (0, _useMemo.useMemo)(selector => classNameParser.transformSync(selector), selector => selector);\n\nfunction generateVariantFunction(generator, options = {}) {\n  return {\n    options,\n    handler: (container, config) => {\n      const cloned = _postcss.default.root({\n        nodes: container.clone().nodes\n      });\n\n      container.before(_lodash.default.defaultTo(generator({\n        container: cloned,\n        separator: config.separator,\n        modifySelectors: modifierFunction => {\n          cloned.each(rule => {\n            if (rule.type !== 'rule') {\n              return;\n            }\n\n            rule.selectors = rule.selectors.map(selector => {\n              return modifierFunction({\n                get className() {\n                  return getClassNameFromSelector(selector);\n                },\n\n                selector\n              });\n            });\n          });\n          return cloned;\n        }\n      }), cloned).nodes);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}