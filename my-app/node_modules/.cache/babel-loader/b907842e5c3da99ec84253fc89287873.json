{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\n\nconst fsStat = require(\"@nodelib/fs.stat\");\n\nconst constants_1 = require(\"../constants\");\n\nconst utils = require(\"../utils\");\n\nconst common = require(\"./common\");\n\nfunction read(directory, settings) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    return readdirWithFileTypes(directory, settings);\n  }\n\n  return readdir(directory, settings);\n}\n\nexports.read = read;\n\nfunction readdirWithFileTypes(directory, settings) {\n  const dirents = settings.fs.readdirSync(directory, {\n    withFileTypes: true\n  });\n  return dirents.map(dirent => {\n    const entry = {\n      dirent,\n      name: dirent.name,\n      path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n    };\n\n    if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n      try {\n        const stats = settings.fs.statSync(entry.path);\n        entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      } catch (error) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          throw error;\n        }\n      }\n    }\n\n    return entry;\n  });\n}\n\nexports.readdirWithFileTypes = readdirWithFileTypes;\n\nfunction readdir(directory, settings) {\n  const names = settings.fs.readdirSync(directory);\n  return names.map(name => {\n    const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n    const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n    const entry = {\n      name,\n      path: entryPath,\n      dirent: utils.fs.createDirentFromStats(name, stats)\n    };\n\n    if (settings.stats) {\n      entry.stats = stats;\n    }\n\n    return entry;\n  });\n}\n\nexports.readdir = readdir;","map":{"version":3,"sources":["/Users/seito/Documents/develop/count-jp/my-app/node_modules/@nodelib/fs.scandir/out/providers/sync.js"],"names":["Object","defineProperty","exports","value","readdir","readdirWithFileTypes","read","fsStat","require","constants_1","utils","common","directory","settings","stats","IS_SUPPORT_READDIR_WITH_FILE_TYPES","dirents","fs","readdirSync","withFileTypes","map","dirent","entry","name","path","joinPathSegments","pathSegmentSeparator","isSymbolicLink","followSymbolicLinks","statSync","createDirentFromStats","error","throwErrorOnBrokenSymbolicLink","names","entryPath","fsStatSettings"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\r\nconst fsStat = require(\"@nodelib/fs.stat\");\r\nconst constants_1 = require(\"../constants\");\r\nconst utils = require(\"../utils\");\r\nconst common = require(\"./common\");\r\nfunction read(directory, settings) {\r\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\r\n        return readdirWithFileTypes(directory, settings);\r\n    }\r\n    return readdir(directory, settings);\r\n}\r\nexports.read = read;\r\nfunction readdirWithFileTypes(directory, settings) {\r\n    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });\r\n    return dirents.map((dirent) => {\r\n        const entry = {\r\n            dirent,\r\n            name: dirent.name,\r\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\r\n        };\r\n        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\r\n            try {\r\n                const stats = settings.fs.statSync(entry.path);\r\n                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\r\n            }\r\n            catch (error) {\r\n                if (settings.throwErrorOnBrokenSymbolicLink) {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        return entry;\r\n    });\r\n}\r\nexports.readdirWithFileTypes = readdirWithFileTypes;\r\nfunction readdir(directory, settings) {\r\n    const names = settings.fs.readdirSync(directory);\r\n    return names.map((name) => {\r\n        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\r\n        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\r\n        const entry = {\r\n            name,\r\n            path: entryPath,\r\n            dirent: utils.fs.createDirentFromStats(name, stats)\r\n        };\r\n        if (settings.stats) {\r\n            entry.stats = stats;\r\n        }\r\n        return entry;\r\n    });\r\n}\r\nexports.readdir = readdir;\r\n"]},"metadata":{},"sourceType":"script"}